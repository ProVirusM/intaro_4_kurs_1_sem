{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from 'axios';\nexport default createStore({\n  state: {\n    resumes: [] // Массив с резюме\n  },\n  mutations: {\n    // Мутация для установки списка резюме\n    setResumes(state, resumes) {\n      state.resumes = resumes;\n    },\n    // Мутация для обновления статуса резюме\n    // Метод обновления статуса резюме\n    // Метод обновления статуса резюме\n    updateResumeStatus(state, {\n      resumeId,\n      newStatus\n    }) {\n      const resume = state.resumes.find(r => r._id === resumeId);\n      if (resume) {\n        resume.status = newStatus;\n      }\n    },\n    // Мутация для обновления информации о резюме\n    updateResume(state, updatedResume) {\n      const index = state.resumes.findIndex(r => r._id === updatedResume._id);\n      if (index !== -1) {\n        state.resumes[index] = updatedResume;\n      }\n    }\n  },\n  actions: {\n    // Получаем резюме с сервера\n    async fetchResumes({\n      commit\n    }) {\n      try {\n        const {\n          data\n        } = await axios.get('http://localhost:3000/api/cv');\n        commit('setResumes', data); // Сохраняем полученные резюме в state\n      } catch (error) {\n        console.error('Ошибка загрузки резюме:', error);\n      }\n    },\n    // Получаем одно резюме по id\n    // async fetchResume({ commit }, id) {\n    //     try {\n    //         const { data } = await axios.get(`http://localhost:3000/api/cv/${id}`);\n    //         return data;\n    //     } catch (error) {\n    //         console.error('Ошибка получения резюме по ID:', error);\n    //     }\n    // },\n    // Обновляем все данные резюме на сервере\n    async updateResume({\n      commit\n    }, updatedResume) {\n      try {\n        // Отправляем PUT-запрос на сервер для обновления всего резюме\n        const response = await axios.put(`http://localhost:3000/api/cv/${updatedResume._id}`, updatedResume);\n        if (response.status === 200) {\n          // Обновляем резюме в Vuex, если запрос успешен\n          commit('updateResume', updatedResume);\n          console.log('Резюме обновлено');\n        }\n      } catch (error) {\n        console.error('Ошибка обновления резюме:', error);\n      }\n    },\n    // Обновляем статус резюме на сервере и в Vuex\n    // Обновляем резюме (включая статус) на сервере и в Vuex\n    // Обновляем статус и остальные данные резюме на сервере и в Vuex\n    async updateResumeStatus({\n      commit\n    }, {\n      resumeId,\n      newStatus\n    }) {\n      try {\n        const response = await axios.put(`/api/resumes/${resumeId}`, {\n          status: newStatus\n        });\n        if (response.status === 200) {\n          commit('updateResumeStatus', {\n            resumeId,\n            newStatus\n          });\n          console.log(`Статус резюме ${resumeId} обновлен на ${newStatus}`);\n        }\n      } catch (error) {\n        console.error('Ошибка при обновлении статуса:', error);\n      }\n    }\n  },\n  getters: {\n    // Геттер для получения всех резюме\n    resumesByStatus: state => state.resumes\n  }\n});","map":{"version":3,"names":["createStore","axios","state","resumes","mutations","setResumes","updateResumeStatus","resumeId","newStatus","resume","find","r","_id","status","updateResume","updatedResume","index","findIndex","actions","fetchResumes","commit","data","get","error","console","response","put","log","getters","resumesByStatus"],"sources":["D:/Users/danil/untitled/my-project/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex';\r\nimport axios from 'axios';\r\n\r\nexport default createStore({\r\n    state: {\r\n        resumes: [],  // Массив с резюме\r\n    },\r\n    mutations: {\r\n        // Мутация для установки списка резюме\r\n        setResumes(state, resumes) {\r\n            state.resumes = resumes;\r\n        },\r\n        // Мутация для обновления статуса резюме\r\n        // Метод обновления статуса резюме\r\n        // Метод обновления статуса резюме\r\n        updateResumeStatus(state, { resumeId, newStatus }) {\r\n            const resume = state.resumes.find(r => r._id === resumeId);\r\n            if (resume) {\r\n                resume.status = newStatus;\r\n            }\r\n        },\r\n\r\n        // Мутация для обновления информации о резюме\r\n        updateResume(state, updatedResume) {\r\n            const index = state.resumes.findIndex(r => r._id === updatedResume._id);\r\n            if (index !== -1) {\r\n                state.resumes[index] = updatedResume;\r\n            }\r\n        },\r\n\r\n\r\n\r\n\r\n    },\r\n    actions: {\r\n        // Получаем резюме с сервера\r\n        async fetchResumes({ commit }) {\r\n            try {\r\n                const { data } = await axios.get('http://localhost:3000/api/cv');\r\n                commit('setResumes', data); // Сохраняем полученные резюме в state\r\n            } catch (error) {\r\n                console.error('Ошибка загрузки резюме:', error);\r\n            }\r\n        },\r\n\r\n        // Получаем одно резюме по id\r\n        // async fetchResume({ commit }, id) {\r\n        //     try {\r\n        //         const { data } = await axios.get(`http://localhost:3000/api/cv/${id}`);\r\n        //         return data;\r\n        //     } catch (error) {\r\n        //         console.error('Ошибка получения резюме по ID:', error);\r\n        //     }\r\n        // },\r\n        // Обновляем все данные резюме на сервере\r\n        async updateResume({ commit }, updatedResume) {\r\n            try {\r\n                // Отправляем PUT-запрос на сервер для обновления всего резюме\r\n                const response = await axios.put(`http://localhost:3000/api/cv/${updatedResume._id}`, updatedResume);\r\n\r\n                if (response.status === 200) {\r\n                    // Обновляем резюме в Vuex, если запрос успешен\r\n                    commit('updateResume', updatedResume);\r\n                    console.log('Резюме обновлено');\r\n                }\r\n            } catch (error) {\r\n                console.error('Ошибка обновления резюме:', error);\r\n            }\r\n        },\r\n        // Обновляем статус резюме на сервере и в Vuex\r\n        // Обновляем резюме (включая статус) на сервере и в Vuex\r\n        // Обновляем статус и остальные данные резюме на сервере и в Vuex\r\n        async updateResumeStatus({ commit }, { resumeId, newStatus }) {\r\n            try {\r\n                const response = await axios.put(`/api/resumes/${resumeId}`, {\r\n                    status: newStatus,\r\n                });\r\n\r\n                if (response.status === 200) {\r\n                    commit('updateResumeStatus', { resumeId, newStatus });\r\n                    console.log(`Статус резюме ${resumeId} обновлен на ${newStatus}`);\r\n                }\r\n            } catch (error) {\r\n                console.error('Ошибка при обновлении статуса:', error);\r\n            }\r\n        },\r\n\r\n    },\r\n    getters: {\r\n        // Геттер для получения всех резюме\r\n        resumesByStatus: (state) => state.resumes,\r\n    },\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}