{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createStore } from 'vuex';\nimport axios from 'axios';\nexport default createStore({\n  state: {\n    resumes: [] // Массив с резюме\n  },\n  mutations: {\n    // Мутация для установки списка резюме\n    setResumes(state, resumes) {\n      console.log('Резюме, полученные с сервера:', resumes); // Логируем полученные данные\n      state.resumes = resumes;\n    },\n    // Мутация для обновления статуса резюме\n    updateResumeStatus(state, {\n      id,\n      status\n    }) {\n      console.log('Обновление статуса резюме', {\n        id,\n        status\n      }); // Логируем обновление\n      const resume = state.resumes.find(r => r._id === id);\n      if (resume) {\n        resume.status = status;\n      } else {\n        console.warn('Резюме с таким id не найдено:', id);\n      }\n    }\n  },\n  actions: {\n    // Получаем резюме с сервера\n    async fetchResumes({\n      commit\n    }) {\n      try {\n        const {\n          data\n        } = await axios.get('http://localhost:3000/api/cv');\n        commit('setResumes', data); // Сохраняем полученные резюме в state\n      } catch (error) {\n        console.error('Ошибка загрузки резюме:', error);\n      }\n    },\n    // Обновляем статус резюме на сервере и в Vuex\n    async updateResumeStatus({\n      commit\n    }, {\n      id,\n      status\n    }) {\n      try {\n        console.log('Отправка запроса на обновление статуса:', {\n          id,\n          status\n        });\n        // Отправляем POST-запрос на сервер для обновления статуса\n        const response = await axios.post(`http://localhost:3000/api/cv/${id}/status/update`, {\n          status\n        });\n        if (response.status === 200) {\n          // Обновляем статус в Vuex, если запрос успешен\n          console.log('Статус обновлен на сервере');\n          commit('updateResumeStatus', {\n            id,\n            status\n          });\n        }\n      } catch (error) {\n        console.error('Ошибка обновления статуса резюме:', error);\n      }\n    }\n  },\n  getters: {\n    // Геттер для получения всех резюме (можно модифицировать для группировки)\n    resumesByStatus: state => state.resumes,\n    // Группируем резюме по статусам для более удобного отображения\n    resumesGroupedByStatus: state => {\n      return state.resumes.reduce((acc, resume) => {\n        if (!acc[resume.status]) {\n          acc[resume.status] = [];\n        }\n        acc[resume.status].push(resume);\n        return acc;\n      }, {});\n    }\n  }\n});","map":{"version":3,"names":["createStore","axios","state","resumes","mutations","setResumes","console","log","updateResumeStatus","id","status","resume","find","r","_id","warn","actions","fetchResumes","commit","data","get","error","response","post","getters","resumesByStatus","resumesGroupedByStatus","reduce","acc","push"],"sources":["D:/Users/danil/untitled/my-project/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex';\r\nimport axios from 'axios';\r\n\r\nexport default createStore({\r\n    state: {\r\n        resumes: [],  // Массив с резюме\r\n    },\r\n    mutations: {\r\n        // Мутация для установки списка резюме\r\n        setResumes(state, resumes) {\r\n            console.log('Резюме, полученные с сервера:', resumes); // Логируем полученные данные\r\n            state.resumes = resumes;\r\n        },\r\n        // Мутация для обновления статуса резюме\r\n        updateResumeStatus(state, { id, status }) {\r\n            console.log('Обновление статуса резюме', { id, status }); // Логируем обновление\r\n            const resume = state.resumes.find((r) => r._id === id);\r\n            if (resume) {\r\n                resume.status = status;\r\n            } else {\r\n                console.warn('Резюме с таким id не найдено:', id);\r\n            }\r\n        },\r\n    },\r\n    actions: {\r\n        // Получаем резюме с сервера\r\n        async fetchResumes({ commit }) {\r\n            try {\r\n                const { data } = await axios.get('http://localhost:3000/api/cv');\r\n                commit('setResumes', data); // Сохраняем полученные резюме в state\r\n            } catch (error) {\r\n                console.error('Ошибка загрузки резюме:', error);\r\n            }\r\n        },\r\n        // Обновляем статус резюме на сервере и в Vuex\r\n        async updateResumeStatus({ commit }, { id, status }) {\r\n            try {\r\n                console.log('Отправка запроса на обновление статуса:', { id, status });\r\n                // Отправляем POST-запрос на сервер для обновления статуса\r\n                const response = await axios.post(`http://localhost:3000/api/cv/${id}/status/update`, { status });\r\n\r\n                if (response.status === 200) {\r\n                    // Обновляем статус в Vuex, если запрос успешен\r\n                    console.log('Статус обновлен на сервере');\r\n                    commit('updateResumeStatus', { id, status });\r\n                }\r\n            } catch (error) {\r\n                console.error('Ошибка обновления статуса резюме:', error);\r\n            }\r\n        }\r\n    },\r\n    getters: {\r\n        // Геттер для получения всех резюме (можно модифицировать для группировки)\r\n        resumesByStatus: (state) => state.resumes,\r\n\r\n        // Группируем резюме по статусам для более удобного отображения\r\n        resumesGroupedByStatus: (state) => {\r\n            return state.resumes.reduce((acc, resume) => {\r\n                if (!acc[resume.status]) {\r\n                    acc[resume.status] = [];\r\n                }\r\n                acc[resume.status].push(resume);\r\n                return acc;\r\n            }, {});\r\n        },\r\n    },\r\n});\r\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC,OAAOC,KAAK,MAAM,OAAO;AAEzB,eAAeD,WAAW,CAAC;EACvBE,KAAK,EAAE;IACHC,OAAO,EAAE,EAAE,CAAG;EAClB,CAAC;EACDC,SAAS,EAAE;IACP;IACAC,UAAUA,CAACH,KAAK,EAAEC,OAAO,EAAE;MACvBG,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEJ,OAAO,CAAC,CAAC,CAAC;MACvDD,KAAK,CAACC,OAAO,GAAGA,OAAO;IAC3B,CAAC;IACD;IACAK,kBAAkBA,CAACN,KAAK,EAAE;MAAEO,EAAE;MAAEC;IAAO,CAAC,EAAE;MACtCJ,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE;QAAEE,EAAE;QAAEC;MAAO,CAAC,CAAC,CAAC,CAAC;MAC1D,MAAMC,MAAM,GAAGT,KAAK,CAACC,OAAO,CAACS,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,GAAG,KAAKL,EAAE,CAAC;MACtD,IAAIE,MAAM,EAAE;QACRA,MAAM,CAACD,MAAM,GAAGA,MAAM;MAC1B,CAAC,MAAM;QACHJ,OAAO,CAACS,IAAI,CAAC,+BAA+B,EAAEN,EAAE,CAAC;MACrD;IACJ;EACJ,CAAC;EACDO,OAAO,EAAE;IACL;IACA,MAAMC,YAAYA,CAAC;MAAEC;IAAO,CAAC,EAAE;MAC3B,IAAI;QACA,MAAM;UAAEC;QAAK,CAAC,GAAG,MAAMlB,KAAK,CAACmB,GAAG,CAAC,8BAA8B,CAAC;QAChEF,MAAM,CAAC,YAAY,EAAEC,IAAI,CAAC,CAAC,CAAC;MAChC,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZf,OAAO,CAACe,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACnD;IACJ,CAAC;IACD;IACA,MAAMb,kBAAkBA,CAAC;MAAEU;IAAO,CAAC,EAAE;MAAET,EAAE;MAAEC;IAAO,CAAC,EAAE;MACjD,IAAI;QACAJ,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAE;UAAEE,EAAE;UAAEC;QAAO,CAAC,CAAC;QACtE;QACA,MAAMY,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,IAAI,CAAC,gCAAgCd,EAAE,gBAAgB,EAAE;UAAEC;QAAO,CAAC,CAAC;QAEjG,IAAIY,QAAQ,CAACZ,MAAM,KAAK,GAAG,EAAE;UACzB;UACAJ,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;UACzCW,MAAM,CAAC,oBAAoB,EAAE;YAAET,EAAE;YAAEC;UAAO,CAAC,CAAC;QAChD;MACJ,CAAC,CAAC,OAAOW,KAAK,EAAE;QACZf,OAAO,CAACe,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC7D;IACJ;EACJ,CAAC;EACDG,OAAO,EAAE;IACL;IACAC,eAAe,EAAGvB,KAAK,IAAKA,KAAK,CAACC,OAAO;IAEzC;IACAuB,sBAAsB,EAAGxB,KAAK,IAAK;MAC/B,OAAOA,KAAK,CAACC,OAAO,CAACwB,MAAM,CAAC,CAACC,GAAG,EAAEjB,MAAM,KAAK;QACzC,IAAI,CAACiB,GAAG,CAACjB,MAAM,CAACD,MAAM,CAAC,EAAE;UACrBkB,GAAG,CAACjB,MAAM,CAACD,MAAM,CAAC,GAAG,EAAE;QAC3B;QACAkB,GAAG,CAACjB,MAAM,CAACD,MAAM,CAAC,CAACmB,IAAI,CAAClB,MAAM,CAAC;QAC/B,OAAOiB,GAAG;MACd,CAAC,EAAE,CAAC,CAAC,CAAC;IACV;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}