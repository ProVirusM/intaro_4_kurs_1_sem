{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions, mapGetters } from 'vuex';\nimport draggable from 'vuedraggable';\n// import axios from 'axios';\n\nexport default {\n  components: {\n    draggable\n  },\n  name: \"HomePage\",\n  data() {\n    return {\n      columns: [{\n        status: 'Новый',\n        label: 'Новый'\n      }, {\n        status: 'Назначено собеседование',\n        label: 'Назначено собеседование'\n      }, {\n        status: 'Принят',\n        label: 'Принят'\n      }, {\n        status: 'Отказ',\n        label: 'Отказ'\n      }]\n    };\n  },\n  computed: {\n    ...mapGetters(['resumesByStatus']),\n    // Получаем резюме из Vuex\n\n    resumesByStatusMap() {\n      const map = {\n        'Новый': [],\n        'Назначено собеседование': [],\n        'Принят': [],\n        'Отказ': []\n      };\n\n      // Группируем резюме по статусам\n      this.resumesByStatus.forEach(resume => {\n        if (map[resume.status]) {\n          map[resume.status].push(resume);\n        }\n      });\n\n      // Здесь не нужно использовать this.$set, достаточно просто вернуть обновленный объект\n      return map;\n    }\n  },\n  methods: {\n    ...mapActions(['fetchResumes']),\n    // Подключаем действия Vuex\n\n    getAge(birthday) {\n      const birthDate = new Date(birthday);\n      const ageDifMs = Date.now() - birthDate.getTime();\n      const ageDate = new Date(ageDifMs);\n      return Math.abs(ageDate.getUTCFullYear() - 1970);\n    },\n    // Событие при начале перетаскивания\n    onDragStart(event) {\n      console.log('Начало перетаскивания', event);\n    },\n    // Событие при завершении перетаскивания\n    async onDragEnd(event) {\n      const {\n        to,\n        item\n      } = event;\n\n      // Получаем новый статус из DOM\n      const newStatus = to?.dataset?.status;\n\n      // Получаем ID перетащенного элемента\n      const resumeId = item.getAttribute('data-id');\n      console.log('Перетащенный элемент ID:', resumeId);\n      console.log('Новый статус:', newStatus);\n      if (!resumeId || !newStatus) {\n        console.warn('ID или новый статус не определены');\n        return;\n      }\n\n      // Ищем резюме по ID\n      const resume = this.resumesByStatus.flat().find(r => r._id === resumeId);\n      if (!resume) {\n        console.error('Резюме не найдено');\n        return;\n      }\n      if (resume.status !== newStatus) {\n        resume.status = newStatus; // Обновляем статус локально\n\n        try {\n          await this.updateResumeStatusAndDetails(resume);\n          console.log('Статус успешно обновлен:', newStatus);\n        } catch (error) {\n          console.error('Ошибка при обновлении статуса:', error);\n        }\n      } else {\n        console.warn('Статус не изменился');\n      }\n    }\n  },\n  async created() {\n    await this.fetchResumes(); // Загружаем резюме при создании компонента\n  }\n};","map":{"version":3,"names":["mapActions","mapGetters","draggable","components","name","data","columns","status","label","computed","resumesByStatusMap","map","resumesByStatus","forEach","resume","push","methods","getAge","birthday","birthDate","Date","ageDifMs","now","getTime","ageDate","Math","abs","getUTCFullYear","onDragStart","event","console","log","onDragEnd","to","item","newStatus","dataset","resumeId","getAttribute","warn","flat","find","r","_id","error","updateResumeStatusAndDetails","created","fetchResumes"],"sources":["D:\\Users\\danil\\untitled\\my-project\\src\\views\\HomePage.vue"],"sourcesContent":["<template>\r\n  <div class=\"homepage\">\r\n    <div class=\"columns\">\r\n      <div v-for=\"column in columns\" :key=\"column.status\" class=\"column\" :data-status=\"column.status\">\r\n        <h3>{{ column.label }} ({{ resumesByStatusMap[column.status]?.length || 0 }})</h3>\r\n\r\n        <!-- Обновленный draggable -->\r\n        <draggable\r\n            v-model=\"resumesByStatusMap[column.status]\"\r\n            @start=\"onDragStart\"\r\n            @end=\"onDragEnd\"\r\n            group=\"resumes\"\r\n            :key=\"column.status\"\r\n        >\r\n          <template #item=\"{ element }\">\r\n            <div\r\n                :key=\"element._id\"\r\n                class=\"resume-card\"\r\n                :data-id=\"element._id\"\r\n                @click=\"$router.push(`/edit/${element._id}`)\"\r\n            >\r\n              <img :src=\"element.photo\" alt=\"Фото\" />\r\n              <p><strong>{{ element.profession }}</strong></p>\r\n              <p>{{ element.name }}</p>\r\n              <p>{{ getAge(element.birthday) }} лет</p>\r\n            </div>\r\n\r\n          </template>\r\n        </draggable>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions, mapGetters } from 'vuex';\r\nimport draggable from 'vuedraggable';\r\n// import axios from 'axios';\r\n\r\nexport default {\r\n  components: { draggable },\r\n  name: \"HomePage\",\r\n  data() {\r\n    return {\r\n      columns: [\r\n        { status: 'Новый', label: 'Новый' },\r\n        { status: 'Назначено собеседование', label: 'Назначено собеседование' },\r\n        { status: 'Принят', label: 'Принят' },\r\n        { status: 'Отказ', label: 'Отказ' },\r\n      ],\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters(['resumesByStatus']), // Получаем резюме из Vuex\r\n\r\n    resumesByStatusMap() {\r\n      const map = {\r\n        'Новый': [],\r\n        'Назначено собеседование': [],\r\n        'Принят': [],\r\n        'Отказ': [],\r\n      };\r\n\r\n      // Группируем резюме по статусам\r\n      this.resumesByStatus.forEach((resume) => {\r\n        if (map[resume.status]) {\r\n          map[resume.status].push(resume);\r\n        }\r\n      });\r\n\r\n      // Здесь не нужно использовать this.$set, достаточно просто вернуть обновленный объект\r\n      return map;\r\n    },\r\n  },\r\n\r\n\r\n  methods: {\r\n    ...mapActions(['fetchResumes']), // Подключаем действия Vuex\r\n\r\n    getAge(birthday) {\r\n      const birthDate = new Date(birthday);\r\n      const ageDifMs = Date.now() - birthDate.getTime();\r\n      const ageDate = new Date(ageDifMs);\r\n      return Math.abs(ageDate.getUTCFullYear() - 1970);\r\n    },\r\n\r\n    // Событие при начале перетаскивания\r\n    onDragStart(event) {\r\n      console.log('Начало перетаскивания', event);\r\n    },\r\n\r\n    // Событие при завершении перетаскивания\r\n    async onDragEnd(event) {\r\n      const { to, item } = event;\r\n\r\n      // Получаем новый статус из DOM\r\n      const newStatus = to?.dataset?.status;\r\n\r\n      // Получаем ID перетащенного элемента\r\n      const resumeId = item.getAttribute('data-id');\r\n\r\n      console.log('Перетащенный элемент ID:', resumeId);\r\n      console.log('Новый статус:', newStatus);\r\n\r\n      if (!resumeId || !newStatus) {\r\n        console.warn('ID или новый статус не определены');\r\n        return;\r\n      }\r\n\r\n      // Ищем резюме по ID\r\n      const resume = this.resumesByStatus.flat().find(r => r._id === resumeId);\r\n\r\n      if (!resume) {\r\n        console.error('Резюме не найдено');\r\n        return;\r\n      }\r\n\r\n      if (resume.status !== newStatus) {\r\n        resume.status = newStatus; // Обновляем статус локально\r\n\r\n        try {\r\n          await this.updateResumeStatusAndDetails(resume);\r\n          console.log('Статус успешно обновлен:', newStatus);\r\n        } catch (error) {\r\n          console.error('Ошибка при обновлении статуса:', error);\r\n        }\r\n      } else {\r\n        console.warn('Статус не изменился');\r\n      }\r\n    }\r\n\r\n\r\n\r\n  },\r\n\r\n  async created() {\r\n    await this.fetchResumes(); // Загружаем резюме при создании компонента\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Стили для колонок и карточек */\r\n.new-resume-btn {\r\n  padding: 10px 20px;\r\n  background-color: #007acc;\r\n  color: white;\r\n  border-radius: 5px;\r\n  margin-bottom: 20px;\r\n  cursor: pointer;\r\n}\r\n\r\n.new-resume-btn:hover {\r\n  background-color: #005f99;\r\n}\r\n\r\n.columns {\r\n  display: flex;\r\n  gap: 20px;\r\n}\r\n\r\n.column {\r\n  width: 22%;\r\n  background-color: #fff;\r\n  padding: 10px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nh3 {\r\n  font-size: 1.2em;\r\n  color: #007acc;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.resume-card {\r\n  background-color: #f9f9f9;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.resume-card img {\r\n  width: 50px;\r\n  height: 50px;\r\n  object-fit: cover;\r\n  border-radius: 50%;\r\n}\r\n\r\n.resume-card p {\r\n  margin: 5px 0;\r\n}\r\n\r\n.column h3 {\r\n  text-align: center;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}