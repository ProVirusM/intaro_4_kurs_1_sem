{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from 'axios';\nexport default createStore({\n  state: {\n    resumes: [] // Массив с резюме\n  },\n  mutations: {\n    // Мутация для установки списка резюме\n    setResumes(state, resumes) {\n      state.resumes = resumes;\n    },\n    // Мутация для обновления статуса резюме\n    updateResume(state, updatedResume) {\n      const index = state.resumes.findIndex(r => r._id === updatedResume._id);\n      if (index !== -1) {\n        // Заменяем старые данные на новые\n        state.resumes.splice(index, 1, updatedResume);\n      }\n    }\n  },\n  actions: {\n    // Получаем резюме с сервера\n    async fetchResumes({\n      commit\n    }) {\n      try {\n        const {\n          data\n        } = await axios.get('http://localhost:3000/api/cv');\n        commit('setResumes', data); // Сохраняем полученные резюме в state\n      } catch (error) {\n        console.error('Ошибка загрузки резюме:', error);\n      }\n    },\n    // Получаем одно резюме по id\n    // async fetchResume({ commit }, id) {\n    //     try {\n    //         const { data } = await axios.get(`http://localhost:3000/api/cv/${id}`);\n    //         return data;\n    //     } catch (error) {\n    //         console.error('Ошибка получения резюме по ID:', error);\n    //     }\n    // },\n    // Обновляем все данные резюме на сервере\n    async updateResume({\n      commit\n    }, updatedResume) {\n      try {\n        // Отправляем PUT-запрос на сервер для обновления всего резюме\n        const response = await axios.put(`http://localhost:3000/api/cv/${updatedResume._id}`, updatedResume);\n        if (response.status === 200) {\n          // Обновляем резюме в Vuex, если запрос успешен\n          commit('updateResume', updatedResume);\n          console.log('Резюме обновлено');\n        }\n      } catch (error) {\n        console.error('Ошибка обновления резюме:', error);\n      }\n    },\n    // Обновляем статус резюме на сервере и в Vuex\n    // Обновляем резюме (включая статус) на сервере и в Vuex\n    // Обновляем статус и остальные данные резюме на сервере и в Vuex\n    async updateResumeStatusAndDetails({\n      commit\n    }, updatedResume) {\n      try {\n        const response = await axios.put(`http://localhost:3000/api/cv/${updatedResume._id}/status/update`, updatedResume);\n        if (response.status === 200) {\n          commit('updateResume', updatedResume);\n          console.log('Резюме обновлено');\n        }\n      } catch (error) {\n        console.error('Ошибка обновления резюме:', error);\n      }\n    }\n  },\n  getters: {\n    // Геттер для получения всех резюме\n    resumesByStatus: state => state.resumes\n  }\n});","map":{"version":3,"names":["createStore","axios","state","resumes","mutations","setResumes","updateResume","updatedResume","index","findIndex","r","_id","splice","actions","fetchResumes","commit","data","get","error","console","response","put","status","log","updateResumeStatusAndDetails","getters","resumesByStatus"],"sources":["D:/Users/danil/untitled/my-project/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex';\r\nimport axios from 'axios';\r\n\r\nexport default createStore({\r\n    state: {\r\n        resumes: [],  // Массив с резюме\r\n    },\r\n    mutations: {\r\n        // Мутация для установки списка резюме\r\n        setResumes(state, resumes) {\r\n            state.resumes = resumes;\r\n        },\r\n        // Мутация для обновления статуса резюме\r\n        updateResume(state, updatedResume) {\r\n            const index = state.resumes.findIndex((r) => r._id === updatedResume._id);\r\n            if (index !== -1) {\r\n                // Заменяем старые данные на новые\r\n                state.resumes.splice(index, 1, updatedResume);\r\n            }\r\n        },\r\n\r\n    },\r\n    actions: {\r\n        // Получаем резюме с сервера\r\n        async fetchResumes({ commit }) {\r\n            try {\r\n                const { data } = await axios.get('http://localhost:3000/api/cv');\r\n                commit('setResumes', data); // Сохраняем полученные резюме в state\r\n            } catch (error) {\r\n                console.error('Ошибка загрузки резюме:', error);\r\n            }\r\n        },\r\n\r\n        // Получаем одно резюме по id\r\n        // async fetchResume({ commit }, id) {\r\n        //     try {\r\n        //         const { data } = await axios.get(`http://localhost:3000/api/cv/${id}`);\r\n        //         return data;\r\n        //     } catch (error) {\r\n        //         console.error('Ошибка получения резюме по ID:', error);\r\n        //     }\r\n        // },\r\n        // Обновляем все данные резюме на сервере\r\n        async updateResume({ commit }, updatedResume) {\r\n            try {\r\n                // Отправляем PUT-запрос на сервер для обновления всего резюме\r\n                const response = await axios.put(`http://localhost:3000/api/cv/${updatedResume._id}`, updatedResume);\r\n\r\n                if (response.status === 200) {\r\n                    // Обновляем резюме в Vuex, если запрос успешен\r\n                    commit('updateResume', updatedResume);\r\n                    console.log('Резюме обновлено');\r\n                }\r\n            } catch (error) {\r\n                console.error('Ошибка обновления резюме:', error);\r\n            }\r\n        },\r\n        // Обновляем статус резюме на сервере и в Vuex\r\n        // Обновляем резюме (включая статус) на сервере и в Vuex\r\n        // Обновляем статус и остальные данные резюме на сервере и в Vuex\r\n        async updateResumeStatusAndDetails({ commit }, updatedResume) {\r\n            try {\r\n                const response = await axios.put(\r\n                    `http://localhost:3000/api/cv/${updatedResume._id}/status/update`,\r\n                    updatedResume\r\n                );\r\n\r\n                if (response.status === 200) {\r\n                    commit('updateResume', updatedResume);\r\n                    console.log('Резюме обновлено');\r\n                }\r\n            } catch (error) {\r\n                console.error('Ошибка обновления резюме:', error);\r\n            }\r\n        }\r\n\r\n    },\r\n    getters: {\r\n        // Геттер для получения всех резюме\r\n        resumesByStatus: (state) => state.resumes,\r\n    },\r\n});\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC,OAAOC,KAAK,MAAM,OAAO;AAEzB,eAAeD,WAAW,CAAC;EACvBE,KAAK,EAAE;IACHC,OAAO,EAAE,EAAE,CAAG;EAClB,CAAC;EACDC,SAAS,EAAE;IACP;IACAC,UAAUA,CAACH,KAAK,EAAEC,OAAO,EAAE;MACvBD,KAAK,CAACC,OAAO,GAAGA,OAAO;IAC3B,CAAC;IACD;IACAG,YAAYA,CAACJ,KAAK,EAAEK,aAAa,EAAE;MAC/B,MAAMC,KAAK,GAAGN,KAAK,CAACC,OAAO,CAACM,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACC,GAAG,KAAKJ,aAAa,CAACI,GAAG,CAAC;MACzE,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;QACd;QACAN,KAAK,CAACC,OAAO,CAACS,MAAM,CAACJ,KAAK,EAAE,CAAC,EAAED,aAAa,CAAC;MACjD;IACJ;EAEJ,CAAC;EACDM,OAAO,EAAE;IACL;IACA,MAAMC,YAAYA,CAAC;MAAEC;IAAO,CAAC,EAAE;MAC3B,IAAI;QACA,MAAM;UAAEC;QAAK,CAAC,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAC,8BAA8B,CAAC;QAChEF,MAAM,CAAC,YAAY,EAAEC,IAAI,CAAC,CAAC,CAAC;MAChC,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACnD;IACJ,CAAC;IAED;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMZ,YAAYA,CAAC;MAAES;IAAO,CAAC,EAAER,aAAa,EAAE;MAC1C,IAAI;QACA;QACA,MAAMa,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAAC,gCAAgCd,aAAa,CAACI,GAAG,EAAE,EAAEJ,aAAa,CAAC;QAEpG,IAAIa,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;UACzB;UACAP,MAAM,CAAC,cAAc,EAAER,aAAa,CAAC;UACrCY,OAAO,CAACI,GAAG,CAAC,kBAAkB,CAAC;QACnC;MACJ,CAAC,CAAC,OAAOL,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACrD;IACJ,CAAC;IACD;IACA;IACA;IACA,MAAMM,4BAA4BA,CAAC;MAAET;IAAO,CAAC,EAAER,aAAa,EAAE;MAC1D,IAAI;QACA,MAAMa,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAC5B,gCAAgCd,aAAa,CAACI,GAAG,gBAAgB,EACjEJ,aACJ,CAAC;QAED,IAAIa,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;UACzBP,MAAM,CAAC,cAAc,EAAER,aAAa,CAAC;UACrCY,OAAO,CAACI,GAAG,CAAC,kBAAkB,CAAC;QACnC;MACJ,CAAC,CAAC,OAAOL,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACrD;IACJ;EAEJ,CAAC;EACDO,OAAO,EAAE;IACL;IACAC,eAAe,EAAGxB,KAAK,IAAKA,KAAK,CAACC;EACtC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}