{"ast":null,"code":"import { ref, computed, onMounted, onBeforeUnmount } from 'vue';\nexport default {\n  props: {\n    modelValue: Object,\n    educationVars: {\n      type: Array,\n      default() {\n        return [];\n      }\n    }\n  },\n  setup(props, {\n    emit\n  }) {\n    const SelectedEducationVars = ref(null);\n    // const educationValue = ref(props.modelValue)\n    // const educationalInstitutionValue = ref(props.modelValue)\n    // const facultyValue = ref(props.modelValue)\n    // const specializationValue = ref(props.modelValue)\n    // const yearOfGraduationValue = ref(props.modelValue)\n    const isDropDownVisible = ref(false);\n    const dropDown = ref(null);\n    const educationData = ref({\n      institution: '',\n      faculty: '',\n      specialization: '',\n      yearOfGraduation: ''\n    });\n    const updateModel = () => {\n      if (!educationData.value.institution || !educationData.value.faculty || !educationData.value.specialization || !educationData.value.yearOfGraduation) {\n        //errorMessage.value = 'Пожалуйста, заполните все поля!';\n        return; // Не обновляем модель, если есть пустые поля\n      }\n    };\n    const toggleSelectedEducationVars = educationVar => {\n      SelectedEducationVars.value = educationVar;\n      isDropDownVisible.value = false;\n      // educationData.educationValue.value=educationVar\n      updateModel();\n\n      // emit('update:modelValue', SelectedEducationVars);\n    };\n    const mappedSelectedEducationVars = computed(() => {\n      return SelectedEducationVars.value?.name || SelectedEducationVars.value || 'Выбери';\n    });\n    // watch(() => props.modelValue, (newVal) => {\n    //   // educationValue.value = newVal\n    // })\n    const closeDropDown = element => {\n      if (!dropDown.value.contains(element.target)) {\n        isDropDownVisible.value = false;\n      }\n    };\n    onMounted(() => {\n      window.addEventListener('click', closeDropDown);\n    });\n    onBeforeUnmount(() => {\n      window.removeEventListener('click', closeDropDown);\n    });\n    return {\n      closeDropDown,\n      educationData,\n      updateModel,\n      SelectedEducationVars,\n      toggleSelectedEducationVars,\n      mappedSelectedEducationVars,\n      isDropDownVisible,\n      dropDown\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","onBeforeUnmount","props","modelValue","Object","educationVars","type","Array","default","setup","emit","SelectedEducationVars","isDropDownVisible","dropDown","educationData","institution","faculty","specialization","yearOfGraduation","updateModel","value","toggleSelectedEducationVars","educationVar","mappedSelectedEducationVars","name","closeDropDown","element","contains","target","window","addEventListener","removeEventListener"],"sources":["D:\\Users\\danil\\untitled\\my-project\\src\\components\\EducationInput.vue"],"sourcesContent":["<template>\r\n  <div ref=\"dropDown\">\r\n    <label>Образование:</label>\r\n<!--    <input type=\"text\" v-model=\"educationValue\" @input=\"$emit('update:modelValue', educationValue)\" />-->\r\n    <div @click=\"isDropDownVisible=true\">\r\n      {{mappedSelectedEducationVars}}\r\n    </div>\r\n    <div v-if=\"isDropDownVisible\">\r\n      <p v-for=\"(educationVar, index) in educationVars\" :key=\"index\" @click=\"toggleSelectedEducationVars(educationVar)\">\r\n        {{ educationVar.name || educationVar }}\r\n      </p>\r\n    </div>\r\n<!--    v-show=\"!SelectedEducationVars\"-->\r\n    <div v-show=\"SelectedEducationVars!==null && SelectedEducationVars.name!=='Среднее'\">\r\n      <label>Учебное заведение:</label>\r\n      <input type=\"text\" v-model=\"educationData.institution\" @input=\"updateModel\" />\r\n      <label>Факультет:</label>\r\n      <input type=\"text\" v-model=\"educationData.faculty\" @input=\"updateModel\" />\r\n      <label>Специализация:</label>\r\n      <input type=\"text\" v-model=\"educationData.specialization\" @input=\"updateModel\" />\r\n      <label>Год окончания:</label>\r\n      <input type=\"text\" v-model=\"educationData.yearOfGraduation\" @input=\"updateModel\" />\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted, onBeforeUnmount} from 'vue'\r\n\r\nexport default {\r\n  props: {\r\n    modelValue: Object,\r\n    educationVars: {\r\n      type: Array,\r\n      default(){\r\n        return []\r\n      }\r\n    }\r\n  },\r\n  setup(props, {emit}) {\r\n    const SelectedEducationVars=ref(null)\r\n    // const educationValue = ref(props.modelValue)\r\n    // const educationalInstitutionValue = ref(props.modelValue)\r\n    // const facultyValue = ref(props.modelValue)\r\n    // const specializationValue = ref(props.modelValue)\r\n    // const yearOfGraduationValue = ref(props.modelValue)\r\n    const isDropDownVisible=ref(false)\r\n    const dropDown=ref(null)\r\n    const educationData = ref({\r\n      institution: '',\r\n      faculty: '',\r\n      specialization: '',\r\n      yearOfGraduation: '',\r\n    });\r\n    const updateModel = () => {\r\n      if (!educationData.value.institution || !educationData.value.faculty || !educationData.value.specialization || !educationData.value.yearOfGraduation) {\r\n        //errorMessage.value = 'Пожалуйста, заполните все поля!';\r\n        return; // Не обновляем модель, если есть пустые поля\r\n      }\r\n    };\r\n    const toggleSelectedEducationVars = (educationVar) => {\r\n      SelectedEducationVars.value=educationVar;\r\n      isDropDownVisible.value=false;\r\n      // educationData.educationValue.value=educationVar\r\n      updateModel();\r\n\r\n      // emit('update:modelValue', SelectedEducationVars);\r\n    }\r\n    const mappedSelectedEducationVars = computed(() => {\r\n      return SelectedEducationVars.value?.name || SelectedEducationVars.value || 'Выбери';\r\n    })\r\n    // watch(() => props.modelValue, (newVal) => {\r\n    //   // educationValue.value = newVal\r\n    // })\r\n    const closeDropDown=(element)=>{\r\n\r\n      if(!dropDown.value.contains(element.target)){\r\n        isDropDownVisible.value=false;\r\n      }\r\n    }\r\n    onMounted(()=>{\r\n      window.addEventListener('click', closeDropDown)\r\n    })\r\n    onBeforeUnmount(()=>{\r\n      window.removeEventListener('click', closeDropDown)\r\n    })\r\n    return { closeDropDown,educationData, updateModel,  SelectedEducationVars, toggleSelectedEducationVars,  mappedSelectedEducationVars, isDropDownVisible, dropDown}\r\n  }\r\n}\r\n</script>"],"mappings":"AA4BA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,eAAe,QAAO,KAAI;AAE7D,eAAe;EACbC,KAAK,EAAE;IACLC,UAAU,EAAEC,MAAM;IAClBC,aAAa,EAAE;MACbC,IAAI,EAAEC,KAAK;MACXC,OAAOA,CAAA,EAAE;QACP,OAAO,EAAC;MACV;IACF;EACF,CAAC;EACDC,KAAKA,CAACP,KAAK,EAAE;IAACQ;EAAI,CAAC,EAAE;IACnB,MAAMC,qBAAqB,GAACb,GAAG,CAAC,IAAI;IACpC;IACA;IACA;IACA;IACA;IACA,MAAMc,iBAAiB,GAACd,GAAG,CAAC,KAAK;IACjC,MAAMe,QAAQ,GAACf,GAAG,CAAC,IAAI;IACvB,MAAMgB,aAAY,GAAIhB,GAAG,CAAC;MACxBiB,WAAW,EAAE,EAAE;MACfC,OAAO,EAAE,EAAE;MACXC,cAAc,EAAE,EAAE;MAClBC,gBAAgB,EAAE;IACpB,CAAC,CAAC;IACF,MAAMC,WAAU,GAAIA,CAAA,KAAM;MACxB,IAAI,CAACL,aAAa,CAACM,KAAK,CAACL,WAAU,IAAK,CAACD,aAAa,CAACM,KAAK,CAACJ,OAAM,IAAK,CAACF,aAAa,CAACM,KAAK,CAACH,cAAa,IAAK,CAACH,aAAa,CAACM,KAAK,CAACF,gBAAgB,EAAE;QACpJ;QACA,OAAM,CAAE;MACV;IACF,CAAC;IACD,MAAMG,2BAA0B,GAAKC,YAAY,IAAK;MACpDX,qBAAqB,CAACS,KAAK,GAACE,YAAY;MACxCV,iBAAiB,CAACQ,KAAK,GAAC,KAAK;MAC7B;MACAD,WAAW,CAAC,CAAC;;MAEb;IACF;IACA,MAAMI,2BAA0B,GAAIxB,QAAQ,CAAC,MAAM;MACjD,OAAOY,qBAAqB,CAACS,KAAK,EAAEI,IAAG,IAAKb,qBAAqB,CAACS,KAAI,IAAK,QAAQ;IACrF,CAAC;IACD;IACA;IACA;IACA,MAAMK,aAAa,GAAEC,OAAO,IAAG;MAE7B,IAAG,CAACb,QAAQ,CAACO,KAAK,CAACO,QAAQ,CAACD,OAAO,CAACE,MAAM,CAAC,EAAC;QAC1ChB,iBAAiB,CAACQ,KAAK,GAAC,KAAK;MAC/B;IACF;IACApB,SAAS,CAAC,MAAI;MACZ6B,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEL,aAAa;IAChD,CAAC;IACDxB,eAAe,CAAC,MAAI;MAClB4B,MAAM,CAACE,mBAAmB,CAAC,OAAO,EAAEN,aAAa;IACnD,CAAC;IACD,OAAO;MAAEA,aAAa;MAACX,aAAa;MAAEK,WAAW;MAAGR,qBAAqB;MAAEU,2BAA2B;MAAGE,2BAA2B;MAAEX,iBAAiB;MAAEC;IAAQ;EACnK;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}