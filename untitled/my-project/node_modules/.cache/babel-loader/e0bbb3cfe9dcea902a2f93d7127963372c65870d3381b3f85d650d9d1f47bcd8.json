{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"suggestions\"\n};\nconst _hoisted_2 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"label\", {\n    for: \"university\"\n  }, \"Учебное заведение:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    id: \"university\",\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.query = $event),\n    onInput: _cache[1] || (_cache[1] = (...args) => $options.fetchUniversities && $options.fetchUniversities(...args)),\n    placeholder: \"Начните вводить название университета\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.query]]), $data.universities.length ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.universities, university => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: university.id,\n      onClick: $event => $options.selectUniversity(university)\n    }, _toDisplayString(university.title), 9 /* TEXT, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","class","_createElementBlock","_createElementVNode","for","id","type","_cache","$event","$data","query","onInput","args","$options","fetchUniversities","placeholder","universities","length","_hoisted_1","_Fragment","_renderList","university","onClick","selectUniversity","title","_hoisted_2","_createCommentVNode"],"sources":["D:\\Users\\danil\\untitled\\my-project\\src\\components\\UniversityInput.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <label for=\"university\">Учебное заведение:</label>\r\n    <input\r\n        id=\"university\"\r\n        type=\"text\"\r\n        v-model=\"query\"\r\n        @input=\"fetchUniversities\"\r\n        placeholder=\"Начните вводить название университета\"\r\n    />\r\n    <ul v-if=\"universities.length\" class=\"suggestions\">\r\n      <li\r\n          v-for=\"university in universities\"\r\n          :key=\"university.id\"\r\n          @click=\"selectUniversity(university)\"\r\n      >\r\n        {{ university.title }}\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  props: {\r\n    modelValue: String, // Текущее значение университета\r\n    city: String, // Город, выбранный в CityInput\r\n  },\r\n  emits: ['update:modelValue'],\r\n  data() {\r\n    return {\r\n      query: this.modelValue || '',\r\n      universities: [],\r\n    };\r\n  },\r\n  watch: {\r\n    modelValue(newValue) {\r\n      if (newValue !== this.query) {\r\n        this.query = newValue;\r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n    async fetchUniversities() {\r\n      if (this.query.length < 2 || !this.city) {\r\n        this.universities = [];\r\n        return;\r\n      }\r\n      try {\r\n        const response = await axios.get('/api/database.getUniversities', {\r\n          params: {\r\n            access_token: process.env.VUE_APP_VK_ACCESS_TOKEN,\r\n            v: process.env.VUE_APP_VK_API_VERSION,\r\n            q: this.query,\r\n            city_id: this.city, // ID города\r\n            count: 10,\r\n          },\r\n        });\r\n        this.universities = response.data.response.items;\r\n      } catch (error) {\r\n        console.error('Ошибка при получении университетов:', error);\r\n      }\r\n    },\r\n    selectUniversity(university) {\r\n      this.query = university.title;\r\n      this.universities = [];\r\n      this.$emit('update:modelValue', university.title);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.suggestions {\r\n  list-style-type: none;\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 1px solid #ddd;\r\n  max-height: 150px;\r\n  overflow-y: auto;\r\n  background: #fff;\r\n}\r\n\r\n.suggestions li {\r\n  padding: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.suggestions li:hover {\r\n  background: #f0f0f0;\r\n}\r\n</style>\r\n"],"mappings":";;EAAAA,GAAA;EAUmCC,KAAK,EAAC;;mBAVzC;;uBACEC,mBAAA,CAkBM,c,0BAjBJC,mBAAA,CAAkD;IAA3CC,GAAG,EAAC;EAAY,GAAC,oBAAkB,sB,gBAC1CD,mBAAA,CAME;IALEE,EAAE,EAAC,YAAY;IACfC,IAAI,EAAC,MAAM;IALnB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAMiBC,KAAA,CAAAC,KAAK,GAAAF,MAAA;IACbG,OAAK,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,iBAAA,IAAAD,QAAA,CAAAC,iBAAA,IAAAF,IAAA,CAAiB;IACzBG,WAAW,EAAC;iEAFHN,KAAA,CAAAC,KAAK,E,GAIRD,KAAA,CAAAO,YAAY,CAACC,MAAM,I,cAA7Bf,mBAAA,CAQK,MARLgB,UAQK,I,kBAPHhB,mBAAA,CAMKiB,SAAA,QAjBXC,WAAA,CAY+BX,KAAA,CAAAO,YAAY,EAA1BK,UAAU;yBADrBnB,mBAAA,CAMK;MAJAF,GAAG,EAAEqB,UAAU,CAAChB,EAAE;MAClBiB,OAAK,EAAAd,MAAA,IAAEK,QAAA,CAAAU,gBAAgB,CAACF,UAAU;wBAElCA,UAAU,CAACG,KAAK,wBAhB3BC,UAAA;sCAAAC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}