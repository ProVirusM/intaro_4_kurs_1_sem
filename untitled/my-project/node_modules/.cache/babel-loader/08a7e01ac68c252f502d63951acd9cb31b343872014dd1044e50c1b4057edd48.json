{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions } from 'vuex';\nexport default {\n  name: 'EditResume',\n  data() {\n    return {\n      resume: {\n        _id: '',\n        name: '',\n        profession: '',\n        birthday: '',\n        email: '',\n        phone: '',\n        city: '',\n        status: '',\n        education: [{\n          level: '',\n          institution: '',\n          faculty: '',\n          specialization: '',\n          yearOfGraduation: '',\n          _id: ''\n        }],\n        salary: '',\n        skills: '',\n        about_me: '',\n        photo: '' // Здесь сохраняем URL фото\n      }\n    };\n  },\n  methods: {\n    ...mapActions(['fetchResumes', 'updateResume']),\n    // Используем новый экшен для обновления резюме\n\n    // Загружаем резюме по id, когда компонент создан\n    async loadResume() {\n      await this.fetchResumes(); // Загружаем все резюме\n\n      const resumeId = this.$route.params.id; // Получаем id из маршрута\n      const resume = this.$store.state.resumes.find(res => res._id === resumeId); // Ищем резюме по id\n\n      if (resume) {\n        // Преобразуем дату в строку формата YYYY-MM-DD\n        if (resume.birthday) {\n          this.resume.birthday = resume.birthday.split('T')[0]; // Убираем время, оставляем только дату\n        }\n        this.resume = {\n          ...resume\n        }; // Заполняем поля формы\n      } else {\n        console.error('Резюме не найдено');\n      }\n    },\n    // Обрабатываем сохранение изменений\n    async saveResume() {\n      try {\n        // Отправляем обновление всего резюме\n        await this.updateResume(this.resume);\n        this.$router.push('/'); // После сохранения перенаправляем на главную страницу\n      } catch (error) {\n        console.error('Ошибка при сохранении резюме:', error);\n      }\n    },\n    addEducation() {\n      this.resume.education.push({\n        level: '',\n        institution: '',\n        faculty: '',\n        specialization: '',\n        yearOfGraduation: ''\n      });\n    },\n    removeEducation(index) {\n      this.resume.education.splice(index, 1);\n    }\n  },\n  async created() {\n    await this.loadResume(); // Загружаем данные резюме при создании компонента\n  }\n};","map":{"version":3,"names":["mapActions","name","data","resume","_id","profession","birthday","email","phone","city","status","education","level","institution","faculty","specialization","yearOfGraduation","salary","skills","about_me","photo","methods","loadResume","fetchResumes","resumeId","$route","params","id","$store","state","resumes","find","res","split","console","error","saveResume","updateResume","$router","push","addEducation","removeEducation","index","splice","created"],"sources":["D:\\Users\\danil\\untitled\\my-project\\src\\views\\EditResumePage.vue"],"sourcesContent":["<template>\r\n  <div class=\"edit-resume\">\r\n    <h2>Редактирование резюме</h2>\r\n\r\n    <!-- Форма редактирования -->\r\n    <form @submit.prevent=\"saveResume\">\r\n      <div class=\"container\">\r\n        <div class=\"form-container\">\r\n          <!-- Основные данные резюме -->\r\n          <div class=\"form-group\">\r\n            <label for=\"name\">Имя</label>\r\n            <input type=\"text\" v-model=\"resume.name\" id=\"name\" required />\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label for=\"profession\">Профессия</label>\r\n            <input type=\"text\" v-model=\"resume.profession\" id=\"profession\" required />\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label for=\"birthday\">Дата рождения</label>\r\n            <input type=\"date\" v-model=\"resume.birthday\" id=\"birthday\" required />\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label for=\"email\">Email</label>\r\n            <input type=\"email\" v-model=\"resume.email\" id=\"email\" required />\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label for=\"phone\">Телефон</label>\r\n            <input type=\"tel\" v-model=\"resume.phone\" id=\"phone\" required />\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label for=\"address\">Город</label>\r\n            <input type=\"text\" v-model=\"resume.city\" id=\"address\" required />\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label for=\"status\">Статус</label>\r\n            <select v-model=\"resume.status\" id=\"status\">\r\n              <option value=\"Новый\">Новый</option>\r\n              <option value=\"Назначено собеседование\">Назначено собеседование</option>\r\n              <option value=\"Принят\">Принят</option>\r\n              <option value=\"Отказ\">Отказ</option>\r\n            </select>\r\n          </div>\r\n\r\n          <!-- Образование -->\r\n          <div v-for=\"(education, index) in resume.education\" :key=\"index\" class=\"education-group\">\r\n            <h3>Образование {{ index + 1 }}</h3>\r\n            <div class=\"form-group\">\r\n              <label :for=\"'education-level-' + index\">Уровень образования</label>\r\n              <input type=\"text\" v-model=\"education.level\" :id=\"'education-level-' + index\" placeholder=\"Уровень образования\" required />\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n              <label :for=\"'education-institution-' + index\">Учебное заведение</label>\r\n              <input type=\"text\" v-model=\"education.institution\" :id=\"'education-institution-' + index\" placeholder=\"Учебное заведение\" />\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n              <label :for=\"'education-faculty-' + index\">Факультет</label>\r\n              <input type=\"text\" v-model=\"education.faculty\" :id=\"'education-faculty-' + index\" placeholder=\"Факультет\" />\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n              <label :for=\"'education-specialization-' + index\">Специализация</label>\r\n              <input type=\"text\" v-model=\"education.specialization\" :id=\"'education-specialization-' + index\" placeholder=\"Специализация\" />\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n              <label :for=\"'education-yearOfGraduation-' + index\">Год выпуска</label>\r\n              <input type=\"text\" v-model=\"education.yearOfGraduation\" :id=\"'education-yearOfGraduation-' + index\" placeholder=\"Год выпуска\" />\r\n            </div>\r\n\r\n            <!-- Кнопка для удаления записи образования -->\r\n            <button type=\"button\" @click=\"removeEducation(index)\">Удалить</button>\r\n            <hr />\r\n          </div>\r\n\r\n          <!-- Кнопка для добавления новой записи образования -->\r\n          <button type=\"button\" @click=\"addEducation\">Добавить образование</button>\r\n\r\n          <button type=\"submit\">Сохранить</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions } from 'vuex';\r\n\r\nexport default {\r\n  name: 'EditResume',\r\n  data() {\r\n    return {\r\n      resume: {\r\n        _id: '',\r\n        name: '',\r\n        profession: '',\r\n        birthday: '',\r\n        email: '',\r\n        phone: '',\r\n        city: '',\r\n        status: '',\r\n        education: [\r\n          {\r\n            level: '',\r\n            institution: '',\r\n            faculty: '',\r\n            specialization: '',\r\n            yearOfGraduation: '',\r\n            _id: ''\r\n          }\r\n        ],\r\n        salary: '',\r\n        skills: '',\r\n        about_me: '',\r\n        photo: '', // Здесь сохраняем URL фото\r\n      },\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    ...mapActions(['fetchResumes', 'updateResume']), // Используем новый экшен для обновления резюме\r\n\r\n    // Загружаем резюме по id, когда компонент создан\r\n    async loadResume() {\r\n      await this.fetchResumes(); // Загружаем все резюме\r\n\r\n      const resumeId = this.$route.params.id; // Получаем id из маршрута\r\n      const resume = this.$store.state.resumes.find(res => res._id === resumeId); // Ищем резюме по id\r\n\r\n      if (resume) {\r\n        // Преобразуем дату в строку формата YYYY-MM-DD\r\n        if (resume.birthday) {\r\n          this.resume.birthday = resume.birthday.split('T')[0]; // Убираем время, оставляем только дату\r\n        }\r\n        this.resume = { ...resume }; // Заполняем поля формы\r\n      } else {\r\n        console.error('Резюме не найдено');\r\n      }\r\n    },\r\n\r\n    // Обрабатываем сохранение изменений\r\n    async saveResume() {\r\n      try {\r\n        // Отправляем обновление всего резюме\r\n        await this.updateResume(this.resume);\r\n        this.$router.push('/'); // После сохранения перенаправляем на главную страницу\r\n      } catch (error) {\r\n        console.error('Ошибка при сохранении резюме:', error);\r\n      }\r\n    },\r\n\r\n    addEducation() {\r\n      this.resume.education.push({\r\n        level: '',\r\n        institution: '',\r\n        faculty: '',\r\n        specialization: '',\r\n        yearOfGraduation: '',\r\n      });\r\n    },\r\n\r\n    removeEducation(index) {\r\n      this.resume.education.splice(index, 1);\r\n    },\r\n  },\r\n\r\n  async created() {\r\n    await this.loadResume(); // Загружаем данные резюме при создании компонента\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Стили для формы редактирования */\r\n.edit-resume {\r\n  max-width: 500px;\r\n  margin: 0 auto;\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 20px;\r\n}\r\n\r\n.form-container {\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n  width: 100%;\r\n  max-width: 600px;\r\n}\r\n\r\nh2 {\r\n  font-size: 1.5em;\r\n  color: #007acc;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.form-group label {\r\n  display: block;\r\n  font-weight: bold;\r\n}\r\n\r\n.form-group input,\r\n.form-group select,\r\n.form-group textarea {\r\n  width: 100%;\r\n  padding: 8px;\r\n  margin-top: 5px;\r\n  border-radius: 4px;\r\n  border: 1px solid #ccc;\r\n}\r\n\r\nbutton {\r\n  padding: 10px 20px;\r\n  background-color: #007acc;\r\n  color: white;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  width: 100%;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #005f99;\r\n}\r\n\r\nimg {\r\n  margin-top: 10px;\r\n  max-width: 100px;\r\n}\r\n</style>\r\n"],"mappings":";AA6FA,SAASA,UAAS,QAAS,MAAM;AAEjC,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE;QACNC,GAAG,EAAE,EAAE;QACPH,IAAI,EAAE,EAAE;QACRI,UAAU,EAAE,EAAE;QACdC,QAAQ,EAAE,EAAE;QACZC,KAAK,EAAE,EAAE;QACTC,KAAK,EAAE,EAAE;QACTC,IAAI,EAAE,EAAE;QACRC,MAAM,EAAE,EAAE;QACVC,SAAS,EAAE,CACT;UACEC,KAAK,EAAE,EAAE;UACTC,WAAW,EAAE,EAAE;UACfC,OAAO,EAAE,EAAE;UACXC,cAAc,EAAE,EAAE;UAClBC,gBAAgB,EAAE,EAAE;UACpBZ,GAAG,EAAE;QACP,EACD;QACDa,MAAM,EAAE,EAAE;QACVC,MAAM,EAAE,EAAE;QACVC,QAAQ,EAAE,EAAE;QACZC,KAAK,EAAE,EAAE,CAAE;MACb;IACF,CAAC;EACH,CAAC;EAEDC,OAAO,EAAE;IACP,GAAGrB,UAAU,CAAC,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;IAAE;;IAEjD;IACA,MAAMsB,UAAUA,CAAA,EAAG;MACjB,MAAM,IAAI,CAACC,YAAY,CAAC,CAAC,EAAE;;MAE3B,MAAMC,QAAO,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE,EAAE;MACxC,MAAMxB,MAAK,GAAI,IAAI,CAACyB,MAAM,CAACC,KAAK,CAACC,OAAO,CAACC,IAAI,CAACC,GAAE,IAAKA,GAAG,CAAC5B,GAAE,KAAMoB,QAAQ,CAAC,EAAE;;MAE5E,IAAIrB,MAAM,EAAE;QACV;QACA,IAAIA,MAAM,CAACG,QAAQ,EAAE;UACnB,IAAI,CAACH,MAAM,CAACG,QAAO,GAAIH,MAAM,CAACG,QAAQ,CAAC2B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;QACxD;QACA,IAAI,CAAC9B,MAAK,GAAI;UAAE,GAAGA;QAAO,CAAC,EAAE;MAC/B,OAAO;QACL+B,OAAO,CAACC,KAAK,CAAC,mBAAmB,CAAC;MACpC;IACF,CAAC;IAED;IACA,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF;QACA,MAAM,IAAI,CAACC,YAAY,CAAC,IAAI,CAAClC,MAAM,CAAC;QACpC,IAAI,CAACmC,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC,EAAE;MAC1B,EAAE,OAAOJ,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IAEDK,YAAYA,CAAA,EAAG;MACb,IAAI,CAACrC,MAAM,CAACQ,SAAS,CAAC4B,IAAI,CAAC;QACzB3B,KAAK,EAAE,EAAE;QACTC,WAAW,EAAE,EAAE;QACfC,OAAO,EAAE,EAAE;QACXC,cAAc,EAAE,EAAE;QAClBC,gBAAgB,EAAE;MACpB,CAAC,CAAC;IACJ,CAAC;IAEDyB,eAAeA,CAACC,KAAK,EAAE;MACrB,IAAI,CAACvC,MAAM,CAACQ,SAAS,CAACgC,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;IACxC;EACF,CAAC;EAED,MAAME,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACtB,UAAU,CAAC,CAAC,EAAE;EAC3B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}