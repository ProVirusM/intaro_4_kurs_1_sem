{"ast":null,"code":"import { ref, watch } from 'vue';\nexport default {\n  props: {\n    modelValue: Object,\n    educationInfo: Array\n  },\n  setup(props, {\n    emit\n  }) {\n    const education = ref({\n      institution: '',\n      faculty: '',\n      specialization: '',\n      yearOfGraduation: ''\n    });\n    const selectedEducationLevel = ref('Среднее');\n\n    // Переменная для проверки, можно ли удалить блок\n    const canRemove = ref(true);\n\n    // Следим за количеством блоков образования\n    watch(() => props.educationInfo.length, newLength => {\n      canRemove.value = newLength > 1; // Запрещаем удаление, если только один блок\n    });\n\n    // Обновляем модель данных\n    const updateModel = () => {\n      emit('update:modelValue', {\n        level: selectedEducationLevel.value,\n        ...education.value\n      });\n    };\n\n    // Функция удаления блока образования\n    const removeEducation = () => {\n      emit('remove'); // Удаляем блок образования в родительском компоненте\n    };\n    return {\n      selectedEducationLevel,\n      education,\n      updateModel,\n      removeEducation,\n      canRemove\n    };\n  }\n};","map":{"version":3,"names":["ref","watch","props","modelValue","Object","educationInfo","Array","setup","emit","education","institution","faculty","specialization","yearOfGraduation","selectedEducationLevel","canRemove","length","newLength","value","updateModel","level","removeEducation"],"sources":["D:\\Users\\danil\\untitled\\my-project\\src\\components\\EducationInput.vue"],"sourcesContent":["<template>\r\n  <div class=\"education-input\">\r\n    <!-- Селект для выбора уровня образования -->\r\n    <label for=\"education-level\">Уровень образования:</label>\r\n    <select v-model=\"selectedEducationLevel\" id=\"education-level\" @change=\"updateModel\">\r\n      <option value=\"Среднее\">Среднее</option>\r\n      <option value=\"Среднее специальное\">Среднее специальное</option>\r\n      <option value=\"Неоконченное высшее\">Неоконченное высшее</option>\r\n      <option value=\"Высшее\">Высшее</option>\r\n    </select>\r\n\r\n    <!-- Дополнительные поля показываются только если выбран один из вариантов: \"Среднее специальное\", \"Неоконченное высшее\", \"Высшее\" -->\r\n    <div v-if=\"selectedEducationLevel !== 'Среднее'\">\r\n      <div class=\"education-fields\">\r\n        <label for=\"institution\">Учебное заведение:</label>\r\n        <input v-model=\"education.institution\" id=\"institution\" type=\"text\" placeholder=\"Введите учебное заведение\" />\r\n\r\n        <label for=\"faculty\">Факультет:</label>\r\n        <input v-model=\"education.faculty\" id=\"faculty\" type=\"text\" placeholder=\"Введите факультет\" />\r\n\r\n        <label for=\"specialization\">Специализация:</label>\r\n        <input v-model=\"education.specialization\" id=\"specialization\" type=\"text\" placeholder=\"Введите специализацию\" />\r\n\r\n        <label for=\"yearOfGraduation\">Год окончания:</label>\r\n        <input v-model=\"education.yearOfGraduation\" id=\"yearOfGraduation\" type=\"date\" placeholder=\"Выберите год окончания\" />\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Крестик для удаления образования, если блок не последний -->\r\n    <button v-if=\"canRemove\" @click=\"removeEducation\" class=\"remove-education-btn\">×</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watch } from 'vue';\r\n\r\nexport default {\r\n  props: {\r\n    modelValue: Object,\r\n    educationInfo: Array\r\n  },\r\n  setup(props, { emit }) {\r\n    const education = ref({\r\n      institution: '',\r\n      faculty: '',\r\n      specialization: '',\r\n      yearOfGraduation: ''\r\n    });\r\n\r\n    const selectedEducationLevel = ref('Среднее');\r\n\r\n    // Переменная для проверки, можно ли удалить блок\r\n    const canRemove = ref(true);\r\n\r\n    // Следим за количеством блоков образования\r\n    watch(() => props.educationInfo.length, (newLength) => {\r\n      canRemove.value = newLength > 1; // Запрещаем удаление, если только один блок\r\n    });\r\n\r\n    // Обновляем модель данных\r\n    const updateModel = () => {\r\n      emit('update:modelValue', { level: selectedEducationLevel.value, ...education.value });\r\n    };\r\n\r\n    // Функция удаления блока образования\r\n    const removeEducation = () => {\r\n      emit('remove'); // Удаляем блок образования в родительском компоненте\r\n    };\r\n\r\n    return {\r\n      selectedEducationLevel,\r\n      education,\r\n      updateModel,\r\n      removeEducation,\r\n      canRemove\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.education-input {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.education-fields {\r\n  margin-top: 10px;\r\n}\r\n\r\n.education-fields input {\r\n  width: 100%;\r\n  padding: 8px;\r\n  margin: 5px 0;\r\n}\r\n\r\n.remove-education-btn {\r\n  margin-top: 10px;\r\n  padding: 8px;\r\n  background-color: #ff4d4d;\r\n  color: white;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 18px;\r\n  line-height: 1;\r\n  width: 30px;\r\n  height: 30px;\r\n  border-radius: 50%;\r\n}\r\n\r\n.remove-education-btn:hover {\r\n  background-color: #d13636;\r\n}\r\n</style>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<!--const computedEducation = computed({-->\r\n<!--get: () => SelectedEducationVars.value?.name || SelectedEducationVars.value || 'Выбери',-->\r\n<!--set: (newValue) => {-->\r\n<!--SelectedEducationVars.value = newValue;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n\r\n<!--const institution = computed({-->\r\n<!--get: () => educationData.value.institution,-->\r\n<!--set: (value) => {-->\r\n<!--educationData.value.institution = value;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n\r\n<!--const faculty = computed({-->\r\n<!--get: () => educationData.value.faculty,-->\r\n<!--set: (value) => {-->\r\n<!--educationData.value.faculty = value;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n\r\n<!--const specialization = computed({-->\r\n<!--get: () => educationData.value.specialization,-->\r\n<!--set: (value) => {-->\r\n<!--educationData.value.specialization = value;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n\r\n<!--const yearOfGraduation = computed({-->\r\n<!--get: () => educationData.value.yearOfGraduation,-->\r\n<!--set: (value) => {-->\r\n<!--educationData.value.yearOfGraduation = value;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->"],"mappings":"AAkCA,SAASA,GAAG,EAAEC,KAAI,QAAS,KAAK;AAEhC,eAAe;EACbC,KAAK,EAAE;IACLC,UAAU,EAAEC,MAAM;IAClBC,aAAa,EAAEC;EACjB,CAAC;EACDC,KAAKA,CAACL,KAAK,EAAE;IAAEM;EAAK,CAAC,EAAE;IACrB,MAAMC,SAAQ,GAAIT,GAAG,CAAC;MACpBU,WAAW,EAAE,EAAE;MACfC,OAAO,EAAE,EAAE;MACXC,cAAc,EAAE,EAAE;MAClBC,gBAAgB,EAAE;IACpB,CAAC,CAAC;IAEF,MAAMC,sBAAqB,GAAId,GAAG,CAAC,SAAS,CAAC;;IAE7C;IACA,MAAMe,SAAQ,GAAIf,GAAG,CAAC,IAAI,CAAC;;IAE3B;IACAC,KAAK,CAAC,MAAMC,KAAK,CAACG,aAAa,CAACW,MAAM,EAAGC,SAAS,IAAK;MACrDF,SAAS,CAACG,KAAI,GAAID,SAAQ,GAAI,CAAC,EAAE;IACnC,CAAC,CAAC;;IAEF;IACA,MAAME,WAAU,GAAIA,CAAA,KAAM;MACxBX,IAAI,CAAC,mBAAmB,EAAE;QAAEY,KAAK,EAAEN,sBAAsB,CAACI,KAAK;QAAE,GAAGT,SAAS,CAACS;MAAM,CAAC,CAAC;IACxF,CAAC;;IAED;IACA,MAAMG,eAAc,GAAIA,CAAA,KAAM;MAC5Bb,IAAI,CAAC,QAAQ,CAAC,EAAE;IAClB,CAAC;IAED,OAAO;MACLM,sBAAsB;MACtBL,SAAS;MACTU,WAAW;MACXE,eAAe;MACfN;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}