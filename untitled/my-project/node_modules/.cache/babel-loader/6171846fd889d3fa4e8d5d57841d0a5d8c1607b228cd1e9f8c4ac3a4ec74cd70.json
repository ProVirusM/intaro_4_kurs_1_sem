{"ast":null,"code":"// store.js\nimport axios from 'axios';\nexport default {\n  state: {\n    resumes: [] // Список всех резюме\n  },\n  mutations: {\n    setResumes(state, resumes) {\n      state.resumes = resumes;\n    },\n    // Мутация для обновления статуса резюме\n    updateResumeStatus(state, {\n      id,\n      status\n    }) {\n      const resume = state.resumes.find(resume => resume._id === id);\n      if (resume) {\n        resume.status = status;\n      }\n    }\n  },\n  actions: {\n    // Загрузка всех резюме с сервера\n    async fetchResumes({\n      commit\n    }) {\n      try {\n        const response = await axios.get('/api/resumes');\n        commit('setResumes', response.data); // Сохраняем резюме в store\n      } catch (error) {\n        console.error('Ошибка загрузки резюме:', error);\n      }\n    },\n    // Обновление статуса резюме на сервере и в store\n    async updateResumeStatus({\n      commit\n    }, {\n      id,\n      status\n    }) {\n      try {\n        // Отправляем запрос на сервер для обновления статуса резюме\n        const response = await axios.put(`/api/resumes/${id}`, {\n          status\n        });\n        if (response.data) {\n          // Обновляем статус в Vuex, если сервер ответил успешно\n          commit('updateResumeStatus', {\n            id,\n            status\n          });\n        }\n      } catch (error) {\n        console.error('Ошибка при обновлении статуса резюме:', error);\n      }\n    }\n  },\n  getters: {\n    resumesByStatus(state) {\n      return state.resumes; // Получаем все резюме для отображения\n    }\n  }\n};","map":{"version":3,"names":["axios","state","resumes","mutations","setResumes","updateResumeStatus","id","status","resume","find","_id","actions","fetchResumes","commit","response","get","data","error","console","put","getters","resumesByStatus"],"sources":["D:/Users/danil/untitled/my-project/src/store/index.js"],"sourcesContent":["// store.js\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    state: {\r\n        resumes: [], // Список всех резюме\r\n    },\r\n\r\n    mutations: {\r\n        setResumes(state, resumes) {\r\n            state.resumes = resumes;\r\n        },\r\n\r\n        // Мутация для обновления статуса резюме\r\n        updateResumeStatus(state, { id, status }) {\r\n            const resume = state.resumes.find(resume => resume._id === id);\r\n            if (resume) {\r\n                resume.status = status;\r\n            }\r\n        },\r\n    },\r\n\r\n    actions: {\r\n        // Загрузка всех резюме с сервера\r\n        async fetchResumes({ commit }) {\r\n            try {\r\n                const response = await axios.get('/api/resumes');\r\n                commit('setResumes', response.data); // Сохраняем резюме в store\r\n            } catch (error) {\r\n                console.error('Ошибка загрузки резюме:', error);\r\n            }\r\n        },\r\n\r\n        // Обновление статуса резюме на сервере и в store\r\n        async updateResumeStatus({ commit }, { id, status }) {\r\n            try {\r\n                // Отправляем запрос на сервер для обновления статуса резюме\r\n                const response = await axios.put(`/api/resumes/${id}`, { status });\r\n                if (response.data) {\r\n                    // Обновляем статус в Vuex, если сервер ответил успешно\r\n                    commit('updateResumeStatus', { id, status });\r\n                }\r\n            } catch (error) {\r\n                console.error('Ошибка при обновлении статуса резюме:', error);\r\n            }\r\n        },\r\n    },\r\n\r\n    getters: {\r\n        resumesByStatus(state) {\r\n            return state.resumes; // Получаем все резюме для отображения\r\n        },\r\n    },\r\n};\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,eAAe;EACXC,KAAK,EAAE;IACHC,OAAO,EAAE,EAAE,CAAE;EACjB,CAAC;EAEDC,SAAS,EAAE;IACPC,UAAUA,CAACH,KAAK,EAAEC,OAAO,EAAE;MACvBD,KAAK,CAACC,OAAO,GAAGA,OAAO;IAC3B,CAAC;IAED;IACAG,kBAAkBA,CAACJ,KAAK,EAAE;MAAEK,EAAE;MAAEC;IAAO,CAAC,EAAE;MACtC,MAAMC,MAAM,GAAGP,KAAK,CAACC,OAAO,CAACO,IAAI,CAACD,MAAM,IAAIA,MAAM,CAACE,GAAG,KAAKJ,EAAE,CAAC;MAC9D,IAAIE,MAAM,EAAE;QACRA,MAAM,CAACD,MAAM,GAAGA,MAAM;MAC1B;IACJ;EACJ,CAAC;EAEDI,OAAO,EAAE;IACL;IACA,MAAMC,YAAYA,CAAC;MAAEC;IAAO,CAAC,EAAE;MAC3B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,cAAc,CAAC;QAChDF,MAAM,CAAC,YAAY,EAAEC,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;MACzC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACnD;IACJ,CAAC;IAED;IACA,MAAMZ,kBAAkBA,CAAC;MAAEQ;IAAO,CAAC,EAAE;MAAEP,EAAE;MAAEC;IAAO,CAAC,EAAE;MACjD,IAAI;QACA;QACA,MAAMO,QAAQ,GAAG,MAAMd,KAAK,CAACmB,GAAG,CAAC,gBAAgBb,EAAE,EAAE,EAAE;UAAEC;QAAO,CAAC,CAAC;QAClE,IAAIO,QAAQ,CAACE,IAAI,EAAE;UACf;UACAH,MAAM,CAAC,oBAAoB,EAAE;YAAEP,EAAE;YAAEC;UAAO,CAAC,CAAC;QAChD;MACJ,CAAC,CAAC,OAAOU,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MACjE;IACJ;EACJ,CAAC;EAEDG,OAAO,EAAE;IACLC,eAAeA,CAACpB,KAAK,EAAE;MACnB,OAAOA,KAAK,CAACC,OAAO,CAAC,CAAC;IAC1B;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}