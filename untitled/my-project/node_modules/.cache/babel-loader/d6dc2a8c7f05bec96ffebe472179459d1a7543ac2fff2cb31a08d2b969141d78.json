{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, withDirectives as _withDirectives, vShow as _vShow } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"dropDown\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[13] || (_cache[13] = _createElementVNode(\"label\", null, \"Образование:\", -1 /* HOISTED */)), _createCommentVNode(\"    <input type=\\\"text\\\" v-model=\\\"educationValue\\\" @input=\\\"$emit('update:modelValue', educationValue)\\\" />\"), _createElementVNode(\"div\", {\n    onClick: _cache[0] || (_cache[0] = $event => $setup.isDropDownVisible = true)\n  }, _toDisplayString($setup.mappedSelectedEducationVars), 1 /* TEXT */), $setup.isDropDownVisible ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.educationVars, (educationVar, index) => {\n    return _openBlock(), _createElementBlock(\"p\", {\n      key: index,\n      onClick: $event => $setup.toggleSelectedEducationVars(educationVar)\n    }, _toDisplayString(educationVar.name || educationVar), 9 /* TEXT, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\"    v-show=\\\"!SelectedEducationVars\\\"\"), _withDirectives(_createElementVNode(\"div\", null, [_cache[9] || (_cache[9] = _createElementVNode(\"label\", null, \"Учебное заведение:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.educationData.institution = $event),\n    onInput: _cache[2] || (_cache[2] = (...args) => $setup.updateModel && $setup.updateModel(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.educationData.institution]]), _cache[10] || (_cache[10] = _createElementVNode(\"label\", null, \"Факультет:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.educationData.faculty = $event),\n    onInput: _cache[4] || (_cache[4] = (...args) => $setup.updateModel && $setup.updateModel(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.educationData.faculty]]), _cache[11] || (_cache[11] = _createElementVNode(\"label\", null, \"Специализация:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $setup.educationData.specialization = $event),\n    onInput: _cache[6] || (_cache[6] = (...args) => $setup.updateModel && $setup.updateModel(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.educationData.specialization]]), _cache[12] || (_cache[12] = _createElementVNode(\"label\", null, \"Год окончания:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => $setup.educationData.yearOfGraduation = $event),\n    onInput: _cache[8] || (_cache[8] = (...args) => $setup.updateModel && $setup.updateModel(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.educationData.yearOfGraduation]])], 512 /* NEED_PATCH */), [[_vShow, $setup.SelectedEducationVars !== null && $setup.SelectedEducationVars.name !== 'Среднее']])], 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","key","_createElementBlock","_hoisted_1","_createElementVNode","_createCommentVNode","onClick","_cache","$event","$setup","isDropDownVisible","mappedSelectedEducationVars","_hoisted_2","_Fragment","_renderList","$props","educationVars","educationVar","index","toggleSelectedEducationVars","name","_hoisted_3","type","educationData","institution","onInput","args","updateModel","faculty","specialization","yearOfGraduation","SelectedEducationVars"],"sources":["D:\\Users\\danil\\untitled\\my-project\\src\\components\\EducationInput.vue"],"sourcesContent":["<template>\r\n  <div ref=\"dropDown\">\r\n    <label>Образование:</label>\r\n<!--    <input type=\"text\" v-model=\"educationValue\" @input=\"$emit('update:modelValue', educationValue)\" />-->\r\n    <div @click=\"isDropDownVisible=true\">\r\n      {{mappedSelectedEducationVars}}\r\n    </div>\r\n    <div v-if=\"isDropDownVisible\">\r\n      <p v-for=\"(educationVar, index) in educationVars\" :key=\"index\" @click=\"toggleSelectedEducationVars(educationVar)\">\r\n        {{ educationVar.name || educationVar }}\r\n      </p>\r\n    </div>\r\n<!--    v-show=\"!SelectedEducationVars\"-->\r\n    <div v-show=\"SelectedEducationVars!==null && SelectedEducationVars.name!=='Среднее'\">\r\n      <label>Учебное заведение:</label>\r\n      <input type=\"text\" v-model=\"educationData.institution\" @input=\"updateModel\" />\r\n      <label>Факультет:</label>\r\n      <input type=\"text\" v-model=\"educationData.faculty\" @input=\"updateModel\" />\r\n      <label>Специализация:</label>\r\n      <input type=\"text\" v-model=\"educationData.specialization\" @input=\"updateModel\" />\r\n      <label>Год окончания:</label>\r\n      <input type=\"text\" v-model=\"educationData.yearOfGraduation\" @input=\"updateModel\" />\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted, onBeforeUnmount} from 'vue'\r\n\r\nexport default {\r\n  props: {\r\n    modelValue: Object,\r\n    educationVars: {\r\n      type: Array,\r\n      default(){\r\n        return []\r\n      }\r\n    }\r\n  },\r\n  setup(props, {emit}) {\r\n    const SelectedEducationVars=ref(null)\r\n    // const educationValue = ref(props.modelValue)\r\n    // const educationalInstitutionValue = ref(props.modelValue)\r\n    // const facultyValue = ref(props.modelValue)\r\n    // const specializationValue = ref(props.modelValue)\r\n    // const yearOfGraduationValue = ref(props.modelValue)\r\n    const isDropDownVisible=ref(false)\r\n    const dropDown=ref(null)\r\n    const educationData = ref({\r\n      education: '',\r\n      institution: '',\r\n      faculty: '',\r\n      specialization: '',\r\n      yearOfGraduation: '',\r\n    });\r\n    const updateModel = () => {\r\n      if (!educationData.value.institution || !educationData.value.faculty || !educationData.value.specialization || !educationData.value.yearOfGraduation) {\r\n        //errorMessage.value = 'Пожалуйста, заполните все поля!';\r\n        return; // Не обновляем модель, если есть пустые поля\r\n      }\r\n\r\n      //errorMessage.value = ''; // Сбрасываем сообщение об ошибке, если все заполнено\r\n      emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });\r\n    };\r\n    const toggleSelectedEducationVars = (educationVar) => {\r\n      SelectedEducationVars.value=educationVar;\r\n      isDropDownVisible.value=false;\r\n      educationData.value.education=educationVar\r\n      if(SelectedEducationVars.value.name==='Среднее'){\r\n        educationData.value.institution=1;\r\n        educationData.value.faculty=1;\r\n        educationData.value.specialization=1;\r\n        educationData.value.yearOfGraduation=1;\r\n      }\r\n      if(SelectedEducationVars.value.name!=='Среднее'){\r\n        educationData.value.institution=null;\r\n        educationData.value.faculty=null;\r\n        educationData.value.specialization=null;\r\n        educationData.value.yearOfGraduation=null;\r\n      }\r\n      updateModel();\r\n\r\n      // emit('update:modelValue', SelectedEducationVars);\r\n    }\r\n    const mappedSelectedEducationVars = computed(() => {\r\n      return SelectedEducationVars.value?.name || SelectedEducationVars.value || 'Выбери';\r\n    })\r\n    // watch(() => props.modelValue, (newVal) => {\r\n    //   // educationValue.value = newVal\r\n    // })\r\n    const closeDropDown=(element)=>{\r\n\r\n      if(!dropDown.value.contains(element.target)){\r\n        isDropDownVisible.value=false;\r\n      }\r\n    }\r\n    onMounted(()=>{\r\n      window.addEventListener('click', closeDropDown)\r\n    })\r\n    onBeforeUnmount(()=>{\r\n      window.removeEventListener('click', closeDropDown)\r\n    })\r\n    return { closeDropDown,educationData, updateModel,  SelectedEducationVars, toggleSelectedEducationVars,  mappedSelectedEducationVars, isDropDownVisible, dropDown}\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n\r\n<!--const computedEducation = computed({-->\r\n<!--get: () => SelectedEducationVars.value?.name || SelectedEducationVars.value || 'Выбери',-->\r\n<!--set: (newValue) => {-->\r\n<!--SelectedEducationVars.value = newValue;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n\r\n<!--const institution = computed({-->\r\n<!--get: () => educationData.value.institution,-->\r\n<!--set: (value) => {-->\r\n<!--educationData.value.institution = value;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n\r\n<!--const faculty = computed({-->\r\n<!--get: () => educationData.value.faculty,-->\r\n<!--set: (value) => {-->\r\n<!--educationData.value.faculty = value;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n\r\n<!--const specialization = computed({-->\r\n<!--get: () => educationData.value.specialization,-->\r\n<!--set: (value) => {-->\r\n<!--educationData.value.specialization = value;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n\r\n<!--const yearOfGraduation = computed({-->\r\n<!--get: () => educationData.value.yearOfGraduation,-->\r\n<!--set: (value) => {-->\r\n<!--educationData.value.yearOfGraduation = value;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->"],"mappings":";;EACOA,GAAG,EAAC;AAAU;;EADrBC,GAAA;AAAA;mBAAA;;uBACEC,mBAAA,CAuBM,OAvBNC,UAuBM,G,4BAtBJC,mBAAA,CAA2B,eAApB,cAAY,sBACvBC,mBAAA,gHAA6G,EACzGD,mBAAA,CAEM;IAFAE,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,MAAA,CAAAC,iBAAiB;sBAC1BD,MAAA,CAAAE,2BAA2B,kBAEpBF,MAAA,CAAAC,iBAAiB,I,cAA5BR,mBAAA,CAIM,OAXVU,UAAA,I,kBAQMV,mBAAA,CAEIW,SAAA,QAVVC,WAAA,CAQyCC,MAAA,CAAAC,aAAa,EARtD,CAQiBC,YAAY,EAAEC,KAAK;yBAA9BhB,mBAAA,CAEI;MAF+CD,GAAG,EAAEiB,KAAK;MAAGZ,OAAK,EAAAE,MAAA,IAAEC,MAAA,CAAAU,2BAA2B,CAACF,YAAY;wBAC1GA,YAAY,CAACG,IAAI,IAAIH,YAAY,wBAT5CI,UAAA;sCAAAhB,mBAAA,gBAYAA,mBAAA,yCAA0C,E,gBACtCD,mBAAA,CASM,c,0BARJA,mBAAA,CAAiC,eAA1B,oBAAkB,sB,gBACzBA,mBAAA,CAA8E;IAAvEkB,IAAI,EAAC,MAAM;IAfxB,uBAAAf,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAekCC,MAAA,CAAAc,aAAa,CAACC,WAAW,GAAAhB,MAAA;IAAGiB,OAAK,EAAAlB,MAAA,QAAAA,MAAA,UAAAmB,IAAA,KAAEjB,MAAA,CAAAkB,WAAA,IAAAlB,MAAA,CAAAkB,WAAA,IAAAD,IAAA,CAAW;iEAA9CjB,MAAA,CAAAc,aAAa,CAACC,WAAW,E,+BACrDpB,mBAAA,CAAyB,eAAlB,YAAU,sB,gBACjBA,mBAAA,CAA0E;IAAnEkB,IAAI,EAAC,MAAM;IAjBxB,uBAAAf,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAiBkCC,MAAA,CAAAc,aAAa,CAACK,OAAO,GAAApB,MAAA;IAAGiB,OAAK,EAAAlB,MAAA,QAAAA,MAAA,UAAAmB,IAAA,KAAEjB,MAAA,CAAAkB,WAAA,IAAAlB,MAAA,CAAAkB,WAAA,IAAAD,IAAA,CAAW;iEAA1CjB,MAAA,CAAAc,aAAa,CAACK,OAAO,E,+BACjDxB,mBAAA,CAA6B,eAAtB,gBAAc,sB,gBACrBA,mBAAA,CAAiF;IAA1EkB,IAAI,EAAC,MAAM;IAnBxB,uBAAAf,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAmBkCC,MAAA,CAAAc,aAAa,CAACM,cAAc,GAAArB,MAAA;IAAGiB,OAAK,EAAAlB,MAAA,QAAAA,MAAA,UAAAmB,IAAA,KAAEjB,MAAA,CAAAkB,WAAA,IAAAlB,MAAA,CAAAkB,WAAA,IAAAD,IAAA,CAAW;iEAAjDjB,MAAA,CAAAc,aAAa,CAACM,cAAc,E,+BACxDzB,mBAAA,CAA6B,eAAtB,gBAAc,sB,gBACrBA,mBAAA,CAAmF;IAA5EkB,IAAI,EAAC,MAAM;IArBxB,uBAAAf,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAqBkCC,MAAA,CAAAc,aAAa,CAACO,gBAAgB,GAAAtB,MAAA;IAAGiB,OAAK,EAAAlB,MAAA,QAAAA,MAAA,UAAAmB,IAAA,KAAEjB,MAAA,CAAAkB,WAAA,IAAAlB,MAAA,CAAAkB,WAAA,IAAAD,IAAA,CAAW;iEAAnDjB,MAAA,CAAAc,aAAa,CAACO,gBAAgB,E,qCAR/CrB,MAAA,CAAAsB,qBAAqB,aAAWtB,MAAA,CAAAsB,qBAAqB,CAACX,IAAI,gB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}