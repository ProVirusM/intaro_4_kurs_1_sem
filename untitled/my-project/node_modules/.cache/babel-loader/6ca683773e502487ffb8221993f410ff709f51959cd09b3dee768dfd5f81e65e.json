{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions, mapGetters } from 'vuex';\nimport draggable from 'vuedraggable';\nexport default {\n  components: {\n    draggable\n  },\n  name: \"HomePage\",\n  data() {\n    return {\n      columns: [{\n        status: 'Новый',\n        label: 'Новый'\n      }, {\n        status: 'Назначено собеседование',\n        label: 'Назначено собеседование'\n      }, {\n        status: 'Принят',\n        label: 'Принят'\n      }, {\n        status: 'Отказ',\n        label: 'Отказ'\n      }]\n    };\n  },\n  computed: {\n    ...mapGetters(['resumesByStatus']),\n    // Получаем резюме из Vuex\n\n    resumesByStatusMap() {\n      const map = {\n        'Новый': [],\n        'Назначено собеседование': [],\n        'Принят': [],\n        'Отказ': []\n      };\n\n      // Группируем резюме по статусам\n      this.resumesByStatus.forEach(resume => {\n        if (map[resume.status]) {\n          map[resume.status].push(resume);\n        }\n      });\n      return map;\n    }\n  },\n  methods: {\n    ...mapActions(['fetchResumes', 'updateResumeStatus']),\n    // Подключаем действия Vuex\n\n    getAge(birthday) {\n      const birthDate = new Date(birthday);\n      const ageDifMs = Date.now() - birthDate.getTime();\n      const ageDate = new Date(ageDifMs);\n      return Math.abs(ageDate.getUTCFullYear() - 1970);\n    },\n    // Событие при начале перетаскивания\n    onDragStart(event) {\n      console.log('Начало перетаскивания', event);\n    },\n    // Событие при завершении перетаскивания\n    async onDragEnd(event) {\n      const {\n        element,\n        to\n      } = event;\n      const newStatus = to.dataset.status; // Получаем новый статус из data-атрибута колонки\n\n      console.log('Элемент перед обновлением:', element);\n      console.log('Новый статус:', newStatus);\n\n      // Если статус изменился\n      if (newStatus && element.status !== newStatus) {\n        try {\n          // Отправляем запрос на сервер для обновления статуса\n          const response = await this.updateResumeStatus({\n            id: element._id,\n            status: newStatus\n          });\n          if (response) {\n            console.log(`Резюме ${element._id} перемещено в статус \"${newStatus}\"`);\n\n            // Обновляем статус в Vuex после успешного обновления на сервере\n            this.$store.commit('updateResumeStatus', {\n              id: element._id,\n              status: newStatus\n            });\n          }\n        } catch (error) {\n          console.error('Ошибка обновления статуса:', error);\n        }\n      }\n    }\n  },\n  async created() {\n    await this.fetchResumes(); // Загружаем резюме при создании компонента\n  }\n};","map":{"version":3,"names":["mapActions","mapGetters","draggable","components","name","data","columns","status","label","computed","resumesByStatusMap","map","resumesByStatus","forEach","resume","push","methods","getAge","birthday","birthDate","Date","ageDifMs","now","getTime","ageDate","Math","abs","getUTCFullYear","onDragStart","event","console","log","onDragEnd","element","to","newStatus","dataset","response","updateResumeStatus","id","_id","$store","commit","error","created","fetchResumes"],"sources":["D:\\Users\\danil\\untitled\\my-project\\src\\views\\HomePage.vue"],"sourcesContent":["<template>\r\n  <div class=\"homepage\">\r\n    <button @click=\"$router.push('/add')\" class=\"new-resume-btn\">Новое резюме</button>\r\n\r\n    <div class=\"columns\">\r\n      <div v-for=\"column in columns\" :key=\"column.status\" class=\"column\" :data-status=\"column.status\">\r\n        <h3>{{ column.label }} ({{ resumesByStatusMap[column.status]?.length || 0 }})</h3>\r\n\r\n        <!-- Обновленный draggable -->\r\n        <draggable\r\n            v-model=\"resumesByStatusMap[column.status]\"\r\n            @start=\"onDragStart\"\r\n            @end=\"onDragEnd\"\r\n            group=\"resumes\"\r\n            :key=\"column.status\"\r\n        >\r\n          <template #item=\"{ element }\">\r\n            <div\r\n                :key=\"element._id\"\r\n                class=\"resume-card\"\r\n                @click=\"$router.push(`/edit/${element._id}`)\"\r\n            >\r\n              <img :src=\"element.photo\" alt=\"Фото\" />\r\n              <p><strong>{{ element.profession }}</strong></p>\r\n              <p>{{ element.name }}</p>\r\n              <p>{{ getAge(element.birthday) }} лет</p>\r\n            </div>\r\n          </template>\r\n        </draggable>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions, mapGetters } from 'vuex';\r\nimport draggable from 'vuedraggable';\r\n\r\nexport default {\r\n  components: { draggable },\r\n  name: \"HomePage\",\r\n  data() {\r\n    return {\r\n      columns: [\r\n        { status: 'Новый', label: 'Новый' },\r\n        { status: 'Назначено собеседование', label: 'Назначено собеседование' },\r\n        { status: 'Принят', label: 'Принят' },\r\n        { status: 'Отказ', label: 'Отказ' },\r\n      ],\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters(['resumesByStatus']), // Получаем резюме из Vuex\r\n\r\n    resumesByStatusMap() {\r\n      const map = {\r\n        'Новый': [],\r\n        'Назначено собеседование': [],\r\n        'Принят': [],\r\n        'Отказ': [],\r\n      };\r\n\r\n      // Группируем резюме по статусам\r\n      this.resumesByStatus.forEach((resume) => {\r\n        if (map[resume.status]) {\r\n          map[resume.status].push(resume);\r\n        }\r\n      });\r\n\r\n      return map;\r\n    },\r\n  },\r\n  methods: {\r\n    ...mapActions(['fetchResumes', 'updateResumeStatus']), // Подключаем действия Vuex\r\n\r\n    getAge(birthday) {\r\n      const birthDate = new Date(birthday);\r\n      const ageDifMs = Date.now() - birthDate.getTime();\r\n      const ageDate = new Date(ageDifMs);\r\n      return Math.abs(ageDate.getUTCFullYear() - 1970);\r\n    },\r\n\r\n    // Событие при начале перетаскивания\r\n    onDragStart(event) {\r\n      console.log('Начало перетаскивания', event);\r\n    },\r\n\r\n    // Событие при завершении перетаскивания\r\n    async onDragEnd(event) {\r\n      const { element, to } = event;\r\n      const newStatus = to.dataset.status; // Получаем новый статус из data-атрибута колонки\r\n\r\n      console.log('Элемент перед обновлением:', element);\r\n      console.log('Новый статус:', newStatus);\r\n\r\n      // Если статус изменился\r\n      if (newStatus && element.status !== newStatus) {\r\n        try {\r\n          // Отправляем запрос на сервер для обновления статуса\r\n          const response = await this.updateResumeStatus({ id: element._id, status: newStatus });\r\n\r\n          if (response) {\r\n            console.log(`Резюме ${element._id} перемещено в статус \"${newStatus}\"`);\r\n\r\n            // Обновляем статус в Vuex после успешного обновления на сервере\r\n            this.$store.commit('updateResumeStatus', { id: element._id, status: newStatus });\r\n          }\r\n        } catch (error) {\r\n          console.error('Ошибка обновления статуса:', error);\r\n        }\r\n      }\r\n    },\r\n  },\r\n\r\n  async created() {\r\n    await this.fetchResumes(); // Загружаем резюме при создании компонента\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Стили для колонок и карточек */\r\n.new-resume-btn {\r\n  padding: 10px 20px;\r\n  background-color: #007acc;\r\n  color: white;\r\n  border-radius: 5px;\r\n  margin-bottom: 20px;\r\n  cursor: pointer;\r\n}\r\n\r\n.new-resume-btn:hover {\r\n  background-color: #005f99;\r\n}\r\n\r\n.columns {\r\n  display: flex;\r\n  gap: 20px;\r\n}\r\n\r\n.column {\r\n  width: 22%;\r\n  background-color: #fff;\r\n  padding: 10px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nh3 {\r\n  font-size: 1.2em;\r\n  color: #007acc;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.resume-card {\r\n  background-color: #f9f9f9;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.resume-card img {\r\n  width: 50px;\r\n  height: 50px;\r\n  object-fit: cover;\r\n  border-radius: 50%;\r\n}\r\n\r\n.resume-card p {\r\n  margin: 5px 0;\r\n}\r\n\r\n.column h3 {\r\n  text-align: center;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}