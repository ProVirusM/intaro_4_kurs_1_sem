{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"error-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"label\", null, \"Имя:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.nameValue = $event),\n    onValid: _cache[1] || (_cache[1] = (...args) => _ctx.validateInput && _ctx.validateInput(...args)),\n    onInput: _cache[2] || (_cache[2] = $event => _ctx.$emit('update:modelValue', $setup.nameValue))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.nameValue]]), _ctx.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, _toDisplayString(_ctx.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","class","_createElementBlock","_createElementVNode","type","_cache","$event","$setup","nameValue","onValid","args","_ctx","validateInput","onInput","$emit","error","_hoisted_1","_toDisplayString","_createCommentVNode"],"sources":["D:\\Users\\danil\\untitled\\my-project\\src\\components\\NameInput.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <label>Имя:</label>\r\n    <input type=\"text\" v-model=\"nameValue\" @valid=\"validateInput\" @input=\"$emit('update:modelValue', nameValue)\" />\r\n    <div v-if=\"error\" class=\"error-message\">{{ error }}</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watch } from 'vue'\r\n\r\nexport default {\r\n  props: {\r\n    modelValue: String\r\n  },\r\n  setup(props) {\r\n    const nameValue = ref(props.modelValue)\r\n    const error = ref(null)\r\n    const validateInput = () => {\r\n      const namePattern = /^[A-ZА-Я][a-zа-я]*$/ // Поддерживает только первую заглавную и остальные строчные буквы\r\n      if(!nameValue.value){\r\n        error.value=\"Поле 'Имя' обязательно для заполнения.\"\r\n      } else if(!namePattern.test(nameValue.value)){\r\n        error.value = \"Имя должно начинаться с заглавной буквы, остальные буквы должны быть строчными и только на русском или английском.\"\r\n      }\r\n\r\n    }\r\n\r\n    watch(() => props.modelValue, (newVal) => {\r\n      nameValue.value = newVal\r\n      validateInput()\r\n    })\r\n\r\n    return { nameValue }\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n.error-message {\r\n  color: red;\r\n  font-size: 0.9em;\r\n}\r\n</style>"],"mappings":";;EAAAA,GAAA;EAIsBC,KAAK,EAAC;;;uBAH1BC,mBAAA,CAIM,c,0BAHJC,mBAAA,CAAmB,eAAZ,MAAI,sB,gBACXA,mBAAA,CAA+G;IAAxGC,IAAI,EAAC,MAAM;IAHtB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAGgCC,MAAA,CAAAC,SAAS,GAAAF,MAAA;IAAGG,OAAK,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,IAAA,CAAAC,aAAA,IAAAD,IAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;IAAGG,OAAK,EAAAR,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEK,IAAA,CAAAG,KAAK,sBAAsBP,MAAA,CAAAC,SAAS;iEAA9ED,MAAA,CAAAC,SAAS,E,GAC1BG,IAAA,CAAAI,KAAK,I,cAAhBb,mBAAA,CAAyD,OAAzDc,UAAyD,EAAAC,gBAAA,CAAdN,IAAA,CAAAI,KAAK,oBAJpDG,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}