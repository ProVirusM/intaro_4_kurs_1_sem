{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, normalizeClass as _normalizeClass, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"error-note\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"label\", null, \"Телефон:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"tel\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.phoneValue = $event),\n    onInput: _cache[1] || (_cache[1] = (...args) => $setup.validateInput && $setup.validateInput(...args)),\n    class: _normalizeClass({\n      'input-error': $setup.error\n    })\n  }, null, 34 /* CLASS, NEED_HYDRATION */), [[_vModelText, $setup.phoneValue]]), $setup.error ? (_openBlock(), _createElementBlock(\"small\", _hoisted_1, _toDisplayString($setup.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","class","_createElementBlock","_createElementVNode","type","_cache","$event","$setup","phoneValue","onInput","args","validateInput","_normalizeClass","error","_hoisted_1","_toDisplayString","_createCommentVNode"],"sources":["D:\\Users\\danil\\untitled\\my-project\\src\\components\\PhoneInput.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <label>Телефон:</label>\r\n    <input type=\"tel\" v-model=\"phoneValue\" @input=\"validateInput\" :class=\"{'input-error': error}\" />\r\n    <small v-if=\"error\" class=\"error-note\" >{{error}}</small>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watch } from 'vue'\r\n\r\nexport default {\r\n  props: {\r\n    modelValue: String\r\n  },\r\n  setup(props, {emit}) {\r\n    const phoneValue = ref(props.modelValue)\r\n    const error=ref(null)\r\n    const validateInput=()=>{\r\n      const phonePattern=/^\\+7\\d{10}$/\r\n      if (!phoneValue.value) {\r\n        error.value = \"Поле 'Номер телефона' обязательно для заполнения.\"\r\n      } else if (!phoneValue.value.startsWith(\"+7\")) {\r\n        error.value = \"Номер телефона должен начинаться с +7.\"\r\n      } else if (!phonePattern.test(phoneValue.value)) {\r\n        error.value = \"Введите корректный номер телефона в формате +7XXXXXXXXXX.\"\r\n      } else {\r\n        error.value = null\r\n      }\r\n      emit('update:modelValue', phoneValue.value)\r\n    }\r\n    // Обновляем значение, если оно меняется из основного компонента\r\n    watch(() => props.modelValue, (newVal) => {\r\n      phoneValue.value = newVal\r\n      validateInput()\r\n    })\r\n\r\n    return { phoneValue, error, validateInput }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\ninput {\r\n  padding: 8px;\r\n  margin-top: 4px;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n}\r\n.input-error {\r\n  border-color: red;\r\n}\r\n\r\n.error-note {\r\n  color: red;\r\n  font-size: 0.8em;\r\n  margin-top: 4px;\r\n}\r\n</style>\r\n"],"mappings":";;EAAAA,GAAA;EAIwBC,KAAK,EAAC;;;uBAH5BC,mBAAA,CAIM,c,0BAHJC,mBAAA,CAAuB,eAAhB,UAAQ,sB,gBACfA,mBAAA,CAAgG;IAAzFC,IAAI,EAAC,KAAK;IAHrB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAG+BC,MAAA,CAAAC,UAAU,GAAAF,MAAA;IAAGG,OAAK,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEH,MAAA,CAAAI,aAAA,IAAAJ,MAAA,CAAAI,aAAA,IAAAD,IAAA,CAAa;IAAGT,KAAK,EAHxEW,eAAA;MAAA,eAG0FL,MAAA,CAAAM;IAAK;2DAAhEN,MAAA,CAAAC,UAAU,E,GACxBD,MAAA,CAAAM,KAAK,I,cAAlBX,mBAAA,CAAyD,SAAzDY,UAAyD,EAAAC,gBAAA,CAAfR,MAAA,CAAAM,KAAK,oBAJnDG,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}