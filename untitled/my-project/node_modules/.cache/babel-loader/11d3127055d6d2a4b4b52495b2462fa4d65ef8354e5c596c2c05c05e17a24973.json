{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"cities-list\"\n};\nconst _hoisted_2 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"label\", null, \"Город:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.cityValue = $event),\n    onInput: _cache[1] || (_cache[1] = (...args) => $setup.onInput && $setup.onInput(...args)),\n    placeholder: \"Введите название города\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.cityValue]]), $setup.cities.length > 0 ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.cities, (city, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      onClick: $event => $setup.selectCity(city),\n      class: \"city-item\"\n    }, _toDisplayString(city.title), 9 /* TEXT, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","class","_createElementBlock","_createElementVNode","type","_cache","$event","$setup","cityValue","onInput","args","placeholder","cities","length","_hoisted_1","_Fragment","_renderList","city","index","onClick","selectCity","title","_hoisted_2","_createCommentVNode"],"sources":["D:\\Users\\danil\\untitled\\my-project\\src\\components\\CityInput.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <label>Город:</label>\r\n    <input\r\n        type=\"text\"\r\n        v-model=\"cityValue\"\r\n        @input=\"onInput\"\r\n        placeholder=\"Введите название города\"\r\n    />\r\n    <ul v-if=\"cities.length > 0\" class=\"cities-list\">\r\n      <li\r\n          v-for=\"(city, index) in cities\"\r\n          :key=\"index\"\r\n          @click=\"selectCity(city)\"\r\n          class=\"city-item\"\r\n      >\r\n        {{ city.title }}\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, defineEmits } from 'vue'\r\n\r\nexport default {\r\n  props: {\r\n    modelValue: String\r\n  },\r\n  setup(props) {\r\n    const cityValue = ref(props.modelValue)\r\n    const cities = ref([])\r\n\r\n    // Определяем emit для отправки событий\r\n    const emit = defineEmits(['update:modelValue'])\r\n\r\n    // Функция для поиска городов через API ВКонтакте\r\n    const fetchCities = async () => {\r\n      if (cityValue.value.trim() === '') {\r\n        cities.value = []\r\n        return\r\n      }\r\n\r\n      try {\r\n        const response = await fetch(`https://api.vk.com/method/database.getCities?q=${cityValue.value}&v=5.131&access_token=95d4a79995d4a79995d4a799df96cb3f6e995d495d4a799f329b17073154c54fe52893a`)\r\n        const data = await response.json()\r\n\r\n        if (data.response && data.response.items) {\r\n          cities.value = data.response.items\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching cities:', error)\r\n      }\r\n    }\r\n\r\n    // Обработчик события ввода\r\n    const onInput = () => {\r\n      fetchCities()\r\n      // Используем emit для отправки события\r\n      emit('update:modelValue', cityValue.value) // Отправляем обновление modelValue родительскому компоненту\r\n    }\r\n\r\n    // Обработчик выбора города\r\n    const selectCity = (city) => {\r\n      cityValue.value = city.title\r\n      cities.value = [] // Скрыть список после выбора\r\n      emit('update:modelValue', city.title) // Отправляем выбранный город родителю\r\n    }\r\n\r\n    return { cityValue, cities, onInput, selectCity }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.cities-list {\r\n  list-style-type: none;\r\n  margin: 0;\r\n  padding: 0;\r\n  max-height: 200px;\r\n  overflow-y: auto;\r\n  border: 1px solid #ccc;\r\n  background-color: #fff;\r\n  position: absolute;\r\n  z-index: 10;\r\n}\r\n\r\n.city-item {\r\n  padding: 8px;\r\n  cursor: pointer;\r\n}\r\n\r\n.city-item:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n</style>\r\n"],"mappings":";;EAAAA,GAAA;EASiCC,KAAK,EAAC;;mBATvC;;uBACEC,mBAAA,CAkBM,c,0BAjBJC,mBAAA,CAAqB,eAAd,QAAM,sB,gBACbA,mBAAA,CAKE;IAJEC,IAAI,EAAC,MAAM;IAJnB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAKiBC,MAAA,CAAAC,SAAS,GAAAF,MAAA;IACjBG,OAAK,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEH,MAAA,CAAAE,OAAA,IAAAF,MAAA,CAAAE,OAAA,IAAAC,IAAA,CAAO;IACfC,WAAW,EAAC;iEAFHJ,MAAA,CAAAC,SAAS,E,GAIZD,MAAA,CAAAK,MAAM,CAACC,MAAM,Q,cAAvBX,mBAAA,CASK,MATLY,UASK,I,kBARHZ,mBAAA,CAOKa,SAAA,QAjBXC,WAAA,CAWkCT,MAAA,CAAAK,MAAM,EAXxC,CAWkBK,IAAI,EAAEC,KAAK;yBADvBhB,mBAAA,CAOK;MALAF,GAAG,EAAEkB,KAAK;MACVC,OAAK,EAAAb,MAAA,IAAEC,MAAA,CAAAa,UAAU,CAACH,IAAI;MACvBhB,KAAK,EAAC;wBAELgB,IAAI,CAACI,KAAK,wBAhBrBC,UAAA;sCAAAC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}