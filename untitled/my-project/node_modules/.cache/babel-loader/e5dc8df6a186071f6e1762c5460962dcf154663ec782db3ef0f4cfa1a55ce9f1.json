{"ast":null,"code":"import { ref, computed, watch } from 'vue';\nexport default {\n  props: {\n    modelValue: Object,\n    educationVars: {\n      type: Array,\n      default() {\n        return [];\n      }\n    }\n  },\n  setup(props, {\n    emit\n  }) {\n    const SelectedEducationVars = ref(null); // Начальное значение null\n    const isDropDownVisible = ref(false);\n    const dropDown = ref(null);\n    const educationData = ref({\n      education: '',\n      institution: '',\n      faculty: '',\n      specialization: '',\n      yearOfGraduation: ''\n    });\n    const updateModel = () => {\n      if (!educationData.value.institution || !educationData.value.faculty || !educationData.value.specialization || !educationData.value.yearOfGraduation) {\n        return; // Не обновляем модель, если есть пустые поля\n      }\n      emit('update:modelValue', {\n        selected: SelectedEducationVars.value,\n        ...educationData.value\n      });\n    };\n    const toggleSelectedEducationVars = educationVar => {\n      SelectedEducationVars.value = educationVar;\n      isDropDownVisible.value = false;\n      educationData.value.education = educationVar;\n      if (SelectedEducationVars.value?.name === 'Среднее') {\n        educationData.value.institution = '';\n        educationData.value.faculty = '';\n        educationData.value.specialization = '';\n        educationData.value.yearOfGraduation = '';\n      } else {\n        educationData.value.institution = null;\n        educationData.value.faculty = null;\n        educationData.value.specialization = null;\n        educationData.value.yearOfGraduation = null;\n      }\n      updateModel();\n    };\n    const mappedSelectedEducationVars = computed(() => {\n      return SelectedEducationVars.value?.name || SelectedEducationVars.value || 'Выбери';\n    });\n    const closeDropDown = element => {\n      if (dropDown.value && !dropDown.value.contains(element.target)) {\n        isDropDownVisible.value = false;\n      }\n    };\n    watch(SelectedEducationVars, newVal => {\n      if (newVal && newVal.name === 'Среднее') {\n        educationData.value.institution = '';\n        educationData.value.faculty = '';\n        educationData.value.specialization = '';\n        educationData.value.yearOfGraduation = '';\n      }\n    });\n    return {\n      closeDropDown,\n      educationData,\n      updateModel,\n      SelectedEducationVars,\n      toggleSelectedEducationVars,\n      mappedSelectedEducationVars,\n      isDropDownVisible,\n      dropDown\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","watch","props","modelValue","Object","educationVars","type","Array","default","setup","emit","SelectedEducationVars","isDropDownVisible","dropDown","educationData","education","institution","faculty","specialization","yearOfGraduation","updateModel","value","selected","toggleSelectedEducationVars","educationVar","name","mappedSelectedEducationVars","closeDropDown","element","contains","target","newVal"],"sources":["D:\\Users\\danil\\untitled\\my-project\\src\\components\\EducationInput.vue"],"sourcesContent":["<template>\r\n  <div class=\"education-input\">\r\n    <div class=\"education-dropdown\" @click=\"toggleDropDown\">\r\n      <p>{{ mappedSelectedEducationVars }}</p>\r\n      <div v-show=\"isDropDownVisible\" class=\"dropdown\" ref=\"dropDown\">\r\n        <div\r\n            v-for=\"(educationVar, index) in educationVars\"\r\n            :key=\"index\"\r\n            @click=\"toggleSelectedEducationVars(educationVar)\">\r\n          {{ educationVar.name }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"SelectedEducationVars?.name && SelectedEducationVars.name !== 'Среднее'\" class=\"education-fields\">\r\n      <label for=\"institution\">Учебное заведение:</label>\r\n      <input v-model=\"educationData.institution\" id=\"institution\" type=\"text\" placeholder=\"Введите учебное заведение\" />\r\n\r\n      <label for=\"faculty\">Факультет:</label>\r\n      <input v-model=\"educationData.faculty\" id=\"faculty\" type=\"text\" placeholder=\"Введите факультет\" />\r\n\r\n      <label for=\"specialization\">Специализация:</label>\r\n      <input v-model=\"educationData.specialization\" id=\"specialization\" type=\"text\" placeholder=\"Введите специализацию\" />\r\n\r\n      <label for=\"yearOfGraduation\">Год окончания:</label>\r\n      <input v-model=\"educationData.yearOfGraduation\" id=\"yearOfGraduation\" type=\"text\" placeholder=\"Введите год окончания\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, watch } from 'vue';\r\n\r\nexport default {\r\n  props: {\r\n    modelValue: Object,\r\n    educationVars: {\r\n      type: Array,\r\n      default() {\r\n        return [];\r\n      }\r\n    }\r\n  },\r\n  setup(props, { emit }) {\r\n    const SelectedEducationVars = ref(null); // Начальное значение null\r\n    const isDropDownVisible = ref(false);\r\n    const dropDown = ref(null);\r\n    const educationData = ref({\r\n      education: '',\r\n      institution: '',\r\n      faculty: '',\r\n      specialization: '',\r\n      yearOfGraduation: '',\r\n    });\r\n\r\n    const updateModel = () => {\r\n      if (!educationData.value.institution || !educationData.value.faculty || !educationData.value.specialization || !educationData.value.yearOfGraduation) {\r\n        return; // Не обновляем модель, если есть пустые поля\r\n      }\r\n      emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });\r\n    };\r\n\r\n    const toggleSelectedEducationVars = (educationVar) => {\r\n      SelectedEducationVars.value = educationVar;\r\n      isDropDownVisible.value = false;\r\n      educationData.value.education = educationVar;\r\n\r\n      if (SelectedEducationVars.value?.name === 'Среднее') {\r\n        educationData.value.institution = '';\r\n        educationData.value.faculty = '';\r\n        educationData.value.specialization = '';\r\n        educationData.value.yearOfGraduation = '';\r\n      } else {\r\n        educationData.value.institution = null;\r\n        educationData.value.faculty = null;\r\n        educationData.value.specialization = null;\r\n        educationData.value.yearOfGraduation = null;\r\n      }\r\n\r\n      updateModel();\r\n    };\r\n\r\n    const mappedSelectedEducationVars = computed(() => {\r\n      return SelectedEducationVars.value?.name || SelectedEducationVars.value || 'Выбери';\r\n    });\r\n\r\n    const closeDropDown = (element) => {\r\n      if (dropDown.value && !dropDown.value.contains(element.target)) {\r\n        isDropDownVisible.value = false;\r\n      }\r\n    };\r\n\r\n    watch(SelectedEducationVars, (newVal) => {\r\n      if (newVal && newVal.name === 'Среднее') {\r\n        educationData.value.institution = '';\r\n        educationData.value.faculty = '';\r\n        educationData.value.specialization = '';\r\n        educationData.value.yearOfGraduation = '';\r\n      }\r\n    });\r\n\r\n    return {\r\n      closeDropDown, educationData, updateModel, SelectedEducationVars, toggleSelectedEducationVars,\r\n      mappedSelectedEducationVars, isDropDownVisible, dropDown\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<!--const computedEducation = computed({-->\r\n<!--get: () => SelectedEducationVars.value?.name || SelectedEducationVars.value || 'Выбери',-->\r\n<!--set: (newValue) => {-->\r\n<!--SelectedEducationVars.value = newValue;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n\r\n<!--const institution = computed({-->\r\n<!--get: () => educationData.value.institution,-->\r\n<!--set: (value) => {-->\r\n<!--educationData.value.institution = value;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n\r\n<!--const faculty = computed({-->\r\n<!--get: () => educationData.value.faculty,-->\r\n<!--set: (value) => {-->\r\n<!--educationData.value.faculty = value;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n\r\n<!--const specialization = computed({-->\r\n<!--get: () => educationData.value.specialization,-->\r\n<!--set: (value) => {-->\r\n<!--educationData.value.specialization = value;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n\r\n<!--const yearOfGraduation = computed({-->\r\n<!--get: () => educationData.value.yearOfGraduation,-->\r\n<!--set: (value) => {-->\r\n<!--educationData.value.yearOfGraduation = value;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->"],"mappings":"AA+BA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,KAAI,QAAS,KAAK;AAE1C,eAAe;EACbC,KAAK,EAAE;IACLC,UAAU,EAAEC,MAAM;IAClBC,aAAa,EAAE;MACbC,IAAI,EAAEC,KAAK;MACXC,OAAOA,CAAA,EAAG;QACR,OAAO,EAAE;MACX;IACF;EACF,CAAC;EACDC,KAAKA,CAACP,KAAK,EAAE;IAAEQ;EAAK,CAAC,EAAE;IACrB,MAAMC,qBAAoB,GAAIZ,GAAG,CAAC,IAAI,CAAC,EAAE;IACzC,MAAMa,iBAAgB,GAAIb,GAAG,CAAC,KAAK,CAAC;IACpC,MAAMc,QAAO,GAAId,GAAG,CAAC,IAAI,CAAC;IAC1B,MAAMe,aAAY,GAAIf,GAAG,CAAC;MACxBgB,SAAS,EAAE,EAAE;MACbC,WAAW,EAAE,EAAE;MACfC,OAAO,EAAE,EAAE;MACXC,cAAc,EAAE,EAAE;MAClBC,gBAAgB,EAAE;IACpB,CAAC,CAAC;IAEF,MAAMC,WAAU,GAAIA,CAAA,KAAM;MACxB,IAAI,CAACN,aAAa,CAACO,KAAK,CAACL,WAAU,IAAK,CAACF,aAAa,CAACO,KAAK,CAACJ,OAAM,IAAK,CAACH,aAAa,CAACO,KAAK,CAACH,cAAa,IAAK,CAACJ,aAAa,CAACO,KAAK,CAACF,gBAAgB,EAAE;QACpJ,OAAM,CAAE;MACV;MACAT,IAAI,CAAC,mBAAmB,EAAE;QAAEY,QAAQ,EAAEX,qBAAqB,CAACU,KAAK;QAAE,GAAGP,aAAa,CAACO;MAAM,CAAC,CAAC;IAC9F,CAAC;IAED,MAAME,2BAA0B,GAAKC,YAAY,IAAK;MACpDb,qBAAqB,CAACU,KAAI,GAAIG,YAAY;MAC1CZ,iBAAiB,CAACS,KAAI,GAAI,KAAK;MAC/BP,aAAa,CAACO,KAAK,CAACN,SAAQ,GAAIS,YAAY;MAE5C,IAAIb,qBAAqB,CAACU,KAAK,EAAEI,IAAG,KAAM,SAAS,EAAE;QACnDX,aAAa,CAACO,KAAK,CAACL,WAAU,GAAI,EAAE;QACpCF,aAAa,CAACO,KAAK,CAACJ,OAAM,GAAI,EAAE;QAChCH,aAAa,CAACO,KAAK,CAACH,cAAa,GAAI,EAAE;QACvCJ,aAAa,CAACO,KAAK,CAACF,gBAAe,GAAI,EAAE;MAC3C,OAAO;QACLL,aAAa,CAACO,KAAK,CAACL,WAAU,GAAI,IAAI;QACtCF,aAAa,CAACO,KAAK,CAACJ,OAAM,GAAI,IAAI;QAClCH,aAAa,CAACO,KAAK,CAACH,cAAa,GAAI,IAAI;QACzCJ,aAAa,CAACO,KAAK,CAACF,gBAAe,GAAI,IAAI;MAC7C;MAEAC,WAAW,CAAC,CAAC;IACf,CAAC;IAED,MAAMM,2BAA0B,GAAI1B,QAAQ,CAAC,MAAM;MACjD,OAAOW,qBAAqB,CAACU,KAAK,EAAEI,IAAG,IAAKd,qBAAqB,CAACU,KAAI,IAAK,QAAQ;IACrF,CAAC,CAAC;IAEF,MAAMM,aAAY,GAAKC,OAAO,IAAK;MACjC,IAAIf,QAAQ,CAACQ,KAAI,IAAK,CAACR,QAAQ,CAACQ,KAAK,CAACQ,QAAQ,CAACD,OAAO,CAACE,MAAM,CAAC,EAAE;QAC9DlB,iBAAiB,CAACS,KAAI,GAAI,KAAK;MACjC;IACF,CAAC;IAEDpB,KAAK,CAACU,qBAAqB,EAAGoB,MAAM,IAAK;MACvC,IAAIA,MAAK,IAAKA,MAAM,CAACN,IAAG,KAAM,SAAS,EAAE;QACvCX,aAAa,CAACO,KAAK,CAACL,WAAU,GAAI,EAAE;QACpCF,aAAa,CAACO,KAAK,CAACJ,OAAM,GAAI,EAAE;QAChCH,aAAa,CAACO,KAAK,CAACH,cAAa,GAAI,EAAE;QACvCJ,aAAa,CAACO,KAAK,CAACF,gBAAe,GAAI,EAAE;MAC3C;IACF,CAAC,CAAC;IAEF,OAAO;MACLQ,aAAa;MAAEb,aAAa;MAAEM,WAAW;MAAET,qBAAqB;MAAEY,2BAA2B;MAC7FG,2BAA2B;MAAEd,iBAAiB;MAAEC;IAClD,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}