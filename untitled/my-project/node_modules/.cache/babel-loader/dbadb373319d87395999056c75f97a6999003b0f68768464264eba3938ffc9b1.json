{"ast":null,"code":"export default {\n  props: {\n    value: Object,\n    // modelValue for two-way binding\n    educationVars: Array // Array of available education options\n  },\n  data() {\n    return {\n      selectedEducation: this.value?.education || '' // To track selected education type\n    };\n  },\n  watch: {\n    selectedEducation(newVal) {\n      // Watch for changes in the selected education and update modelValue accordingly\n      this.$emit('update:value', {\n        ...this.value,\n        education: newVal\n      });\n    },\n    // Watch other fields in value and propagate updates to the parent\n    'value.institution'(newVal) {\n      this.$emit('update:value', {\n        ...this.value,\n        institution: newVal\n      });\n    },\n    'value.faculty'(newVal) {\n      this.$emit('update:value', {\n        ...this.value,\n        faculty: newVal\n      });\n    },\n    'value.specialization'(newVal) {\n      this.$emit('update:value', {\n        ...this.value,\n        specialization: newVal\n      });\n    },\n    'value.yearOfGraduation'(newVal) {\n      this.$emit('update:value', {\n        ...this.value,\n        yearOfGraduation: newVal\n      });\n    }\n  }\n};","map":{"version":3,"names":["props","value","Object","educationVars","Array","data","selectedEducation","education","watch","newVal","$emit","value.institution","institution","value.faculty","faculty","value.specialization","specialization","value.yearOfGraduation","yearOfGraduation"],"sources":["D:\\Users\\danil\\untitled\\my-project\\src\\components\\EducationInput.vue"],"sourcesContent":["<template>\r\n  <div class=\"education-input\">\r\n    <label for=\"education\">Образование:</label>\r\n    <select v-model=\"selectedEducation\" id=\"education\">\r\n      <option v-for=\"edu in educationVars\" :key=\"edu.value\" :value=\"edu.name\">\r\n        {{ edu.name }}\r\n      </option>\r\n    </select>\r\n\r\n    <div v-if=\"selectedEducation && selectedEducation !== 'Среднее'\">\r\n      <label for=\"institution\">Учебное заведение:</label>\r\n      <input v-model=\"value.institution\" type=\"text\" id=\"institution\" placeholder=\"Введите учебное заведение\" />\r\n\r\n      <label for=\"faculty\">Факультет:</label>\r\n      <input v-model=\"value.faculty\" type=\"text\" id=\"faculty\" placeholder=\"Введите факультет\" />\r\n\r\n      <label for=\"specialization\">Специализация:</label>\r\n      <input v-model=\"value.specialization\" type=\"text\" id=\"specialization\" placeholder=\"Введите специализацию\" />\r\n\r\n      <label for=\"yearOfGraduation\">Год окончания:</label>\r\n      <input v-model=\"value.yearOfGraduation\" type=\"number\" id=\"yearOfGraduation\" placeholder=\"Год окончания\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    value: Object, // modelValue for two-way binding\r\n    educationVars: Array, // Array of available education options\r\n  },\r\n  data() {\r\n    return {\r\n      selectedEducation: this.value?.education || '', // To track selected education type\r\n    };\r\n  },\r\n  watch: {\r\n    selectedEducation(newVal) {\r\n      // Watch for changes in the selected education and update modelValue accordingly\r\n      this.$emit('update:value', { ...this.value, education: newVal });\r\n    },\r\n    // Watch other fields in value and propagate updates to the parent\r\n    'value.institution'(newVal) {\r\n      this.$emit('update:value', { ...this.value, institution: newVal });\r\n    },\r\n    'value.faculty'(newVal) {\r\n      this.$emit('update:value', { ...this.value, faculty: newVal });\r\n    },\r\n    'value.specialization'(newVal) {\r\n      this.$emit('update:value', { ...this.value, specialization: newVal });\r\n    },\r\n    'value.yearOfGraduation'(newVal) {\r\n      this.$emit('update:value', { ...this.value, yearOfGraduation: newVal });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<!--<template>-->\r\n<!--  <div ref=\"dropDown\">-->\r\n<!--    <label>Образование:</label>-->\r\n<!--&lt;!&ndash;    <input type=\"text\" v-model=\"educationValue\" @input=\"$emit('update:modelValue', educationValue)\" />&ndash;&gt;-->\r\n<!--    <div @click=\"isDropDownVisible=true\">-->\r\n<!--      {{mappedSelectedEducationVars}}-->\r\n<!--    </div>-->\r\n<!--    <div v-if=\"isDropDownVisible\">-->\r\n<!--      <p v-for=\"(educationVar, index) in educationVars\" :key=\"index\" @click=\"toggleSelectedEducationVars(educationVar)\">-->\r\n<!--        {{ educationVar.name || educationVar }}-->\r\n<!--      </p>-->\r\n<!--    </div>-->\r\n<!--&lt;!&ndash;    v-show=\"!SelectedEducationVars\"&ndash;&gt;-->\r\n<!--    <div v-show=\"SelectedEducationVars!==null && SelectedEducationVars.name!=='Среднее'\">-->\r\n<!--      <label>Учебное заведение:</label>-->\r\n<!--      <input type=\"text\" v-model=\"educationData.institution\" @input=\"updateModel\" />-->\r\n<!--      <label>Факультет:</label>-->\r\n<!--      <input type=\"text\" v-model=\"educationData.faculty\" @input=\"updateModel\" />-->\r\n<!--      <label>Специализация:</label>-->\r\n<!--      <input type=\"text\" v-model=\"educationData.specialization\" @input=\"updateModel\" />-->\r\n<!--      <label>Год окончания:</label>-->\r\n<!--      <input type=\"text\" v-model=\"educationData.yearOfGraduation\" @input=\"updateModel\" />-->\r\n<!--    </div>-->\r\n\r\n<!--  </div>-->\r\n<!--</template>-->\r\n\r\n<!--<script>-->\r\n<!--import { ref, computed, onMounted, onBeforeUnmount} from 'vue'-->\r\n\r\n<!--export default {-->\r\n<!--  props: {-->\r\n<!--    modelValue: Object,-->\r\n<!--    educationVars: {-->\r\n<!--      type: Array,-->\r\n<!--      default(){-->\r\n<!--        return []-->\r\n<!--      }-->\r\n<!--    }-->\r\n<!--  },-->\r\n<!--  setup(props, {emit}) {-->\r\n<!--    const SelectedEducationVars=ref(null)-->\r\n<!--    // const educationValue = ref(props.modelValue)-->\r\n<!--    // const educationalInstitutionValue = ref(props.modelValue)-->\r\n<!--    // const facultyValue = ref(props.modelValue)-->\r\n<!--    // const specializationValue = ref(props.modelValue)-->\r\n<!--    // const yearOfGraduationValue = ref(props.modelValue)-->\r\n<!--    const isDropDownVisible=ref(false)-->\r\n<!--    const dropDown=ref(null)-->\r\n<!--    const educationData = ref({-->\r\n<!--      education: '',-->\r\n<!--      institution: '',-->\r\n<!--      faculty: '',-->\r\n<!--      specialization: '',-->\r\n<!--      yearOfGraduation: '',-->\r\n<!--    });-->\r\n<!--    const updateModel = () => {-->\r\n<!--      if (!educationData.value.institution || !educationData.value.faculty || !educationData.value.specialization || !educationData.value.yearOfGraduation) {-->\r\n<!--        //errorMessage.value = 'Пожалуйста, заполните все поля!';-->\r\n<!--        return; // Не обновляем модель, если есть пустые поля-->\r\n<!--      }-->\r\n\r\n<!--      //errorMessage.value = ''; // Сбрасываем сообщение об ошибке, если все заполнено-->\r\n<!--      emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--    };-->\r\n<!--    const toggleSelectedEducationVars = (educationVar) => {-->\r\n<!--      SelectedEducationVars.value=educationVar;-->\r\n<!--      isDropDownVisible.value=false;-->\r\n<!--      educationData.value.education=educationVar-->\r\n<!--      if(SelectedEducationVars.value.name==='Среднее'){-->\r\n<!--        educationData.value.institution=1;-->\r\n<!--        educationData.value.faculty=1;-->\r\n<!--        educationData.value.specialization=1;-->\r\n<!--        educationData.value.yearOfGraduation=1;-->\r\n<!--      }-->\r\n<!--      if(SelectedEducationVars.value.name!=='Среднее'){-->\r\n<!--        educationData.value.institution=null;-->\r\n<!--        educationData.value.faculty=null;-->\r\n<!--        educationData.value.specialization=null;-->\r\n<!--        educationData.value.yearOfGraduation=null;-->\r\n<!--      }-->\r\n<!--      updateModel();-->\r\n\r\n<!--      // emit('update:modelValue', SelectedEducationVars);-->\r\n<!--    }-->\r\n<!--    const mappedSelectedEducationVars = computed(() => {-->\r\n<!--      return SelectedEducationVars.value?.name || SelectedEducationVars.value || 'Выбери';-->\r\n<!--    })-->\r\n<!--    // watch(() => props.modelValue, (newVal) => {-->\r\n<!--    //   // educationValue.value = newVal-->\r\n<!--    // })-->\r\n<!--    const closeDropDown=(element)=>{-->\r\n\r\n<!--      if(!dropDown.value.contains(element.target)){-->\r\n<!--        isDropDownVisible.value=false;-->\r\n<!--      }-->\r\n<!--    }-->\r\n<!--    onMounted(()=>{-->\r\n<!--      window.addEventListener('click', closeDropDown)-->\r\n<!--    })-->\r\n<!--    onBeforeUnmount(()=>{-->\r\n<!--      window.removeEventListener('click', closeDropDown)-->\r\n<!--    })-->\r\n<!--    return { closeDropDown,educationData, updateModel,  SelectedEducationVars, toggleSelectedEducationVars,  mappedSelectedEducationVars, isDropDownVisible, dropDown}-->\r\n<!--  }-->\r\n<!--}-->\r\n<!--</script>-->\r\n\r\n\r\n\r\n<!--const computedEducation = computed({-->\r\n<!--get: () => SelectedEducationVars.value?.name || SelectedEducationVars.value || 'Выбери',-->\r\n<!--set: (newValue) => {-->\r\n<!--SelectedEducationVars.value = newValue;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n\r\n<!--const institution = computed({-->\r\n<!--get: () => educationData.value.institution,-->\r\n<!--set: (value) => {-->\r\n<!--educationData.value.institution = value;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n\r\n<!--const faculty = computed({-->\r\n<!--get: () => educationData.value.faculty,-->\r\n<!--set: (value) => {-->\r\n<!--educationData.value.faculty = value;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n\r\n<!--const specialization = computed({-->\r\n<!--get: () => educationData.value.specialization,-->\r\n<!--set: (value) => {-->\r\n<!--educationData.value.specialization = value;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n\r\n<!--const yearOfGraduation = computed({-->\r\n<!--get: () => educationData.value.yearOfGraduation,-->\r\n<!--set: (value) => {-->\r\n<!--educationData.value.yearOfGraduation = value;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n"],"mappings":"AA0BA,eAAe;EACbA,KAAK,EAAE;IACLC,KAAK,EAAEC,MAAM;IAAE;IACfC,aAAa,EAAEC,KAAK,CAAE;EACxB,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,iBAAiB,EAAE,IAAI,CAACL,KAAK,EAAEM,SAAQ,IAAK,EAAE,CAAE;IAClD,CAAC;EACH,CAAC;EACDC,KAAK,EAAE;IACLF,iBAAiBA,CAACG,MAAM,EAAE;MACxB;MACA,IAAI,CAACC,KAAK,CAAC,cAAc,EAAE;QAAE,GAAG,IAAI,CAACT,KAAK;QAAEM,SAAS,EAAEE;MAAO,CAAC,CAAC;IAClE,CAAC;IACD;IACA,mBAAmBE,CAACF,MAAM,EAAE;MAC1B,IAAI,CAACC,KAAK,CAAC,cAAc,EAAE;QAAE,GAAG,IAAI,CAACT,KAAK;QAAEW,WAAW,EAAEH;MAAO,CAAC,CAAC;IACpE,CAAC;IACD,eAAeI,CAACJ,MAAM,EAAE;MACtB,IAAI,CAACC,KAAK,CAAC,cAAc,EAAE;QAAE,GAAG,IAAI,CAACT,KAAK;QAAEa,OAAO,EAAEL;MAAO,CAAC,CAAC;IAChE,CAAC;IACD,sBAAsBM,CAACN,MAAM,EAAE;MAC7B,IAAI,CAACC,KAAK,CAAC,cAAc,EAAE;QAAE,GAAG,IAAI,CAACT,KAAK;QAAEe,cAAc,EAAEP;MAAO,CAAC,CAAC;IACvE,CAAC;IACD,wBAAwBQ,CAACR,MAAM,EAAE;MAC/B,IAAI,CAACC,KAAK,CAAC,cAAc,EAAE;QAAE,GAAG,IAAI,CAACT,KAAK;QAAEiB,gBAAgB,EAAET;MAAO,CAAC,CAAC;IACzE;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}