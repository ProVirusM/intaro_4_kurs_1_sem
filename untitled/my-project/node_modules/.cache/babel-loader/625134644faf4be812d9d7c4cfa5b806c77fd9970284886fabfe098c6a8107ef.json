{"ast":null,"code":"import { ref, defineEmits } from 'vue';\nexport default {\n  props: {\n    modelValue: String\n  },\n  setup(props) {\n    const cityValue = ref(props.modelValue);\n    const cities = ref([]);\n\n    // Создаем функцию emit с помощью defineEmits\n    const emit = defineEmits();\n\n    // Функция для поиска городов через API ВКонтакте\n    const fetchCities = async () => {\n      if (cityValue.value.trim() === '') {\n        cities.value = [];\n        return;\n      }\n      try {\n        const response = await fetch(`https://api.vk.com/method/database.getCities?q=${cityValue.value}&v=5.131&access_token=95d4a79995d4a79995d4a799df96cb3f6e995d495d4a799f329b17073154c54fe52893a`);\n        const data = await response.json();\n        if (data.response && data.response.items) {\n          cities.value = data.response.items;\n        }\n      } catch (error) {\n        console.error('Error fetching cities:', error);\n      }\n    };\n\n    // Обработчик события ввода\n    const onInput = () => {\n      fetchCities();\n      // Здесь используем emit для передачи обновленного значения родительскому компоненту\n      emit('update:modelValue', cityValue.value);\n    };\n\n    // Обработчик выбора города\n    const selectCity = city => {\n      cityValue.value = city.title;\n      cities.value = []; // Скрываем список после выбора\n      emit('update:modelValue', city.title); // Отправляем выбранный город родителю\n    };\n    return {\n      cityValue,\n      cities,\n      onInput,\n      selectCity\n    };\n  }\n};","map":{"version":3,"names":["ref","defineEmits","props","modelValue","String","setup","cityValue","cities","emit","fetchCities","value","trim","response","fetch","data","json","items","error","console","onInput","selectCity","city","title"],"sources":["D:\\Users\\danil\\untitled\\my-project\\src\\components\\CityInput.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <label>Город:</label>\r\n    <input\r\n        type=\"text\"\r\n        v-model=\"cityValue\"\r\n        @input=\"onInput\"\r\n        placeholder=\"Введите название города\"\r\n    />\r\n    <ul v-if=\"cities.length > 0\" class=\"cities-list\">\r\n      <li\r\n          v-for=\"(city, index) in cities\"\r\n          :key=\"index\"\r\n          @click=\"selectCity(city)\"\r\n          class=\"city-item\"\r\n      >\r\n        {{ city.title }}\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, defineEmits } from 'vue'\r\n\r\nexport default {\r\n  props: {\r\n    modelValue: String\r\n  },\r\n  setup(props) {\r\n    const cityValue = ref(props.modelValue)\r\n    const cities = ref([])\r\n\r\n    // Создаем функцию emit с помощью defineEmits\r\n    const emit = defineEmits()\r\n\r\n    // Функция для поиска городов через API ВКонтакте\r\n    const fetchCities = async () => {\r\n      if (cityValue.value.trim() === '') {\r\n        cities.value = []\r\n        return\r\n      }\r\n\r\n      try {\r\n        const response = await fetch(`https://api.vk.com/method/database.getCities?q=${cityValue.value}&v=5.131&access_token=95d4a79995d4a79995d4a799df96cb3f6e995d495d4a799f329b17073154c54fe52893a`)\r\n        const data = await response.json()\r\n\r\n        if (data.response && data.response.items) {\r\n          cities.value = data.response.items\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching cities:', error)\r\n      }\r\n    }\r\n\r\n    // Обработчик события ввода\r\n    const onInput = () => {\r\n      fetchCities()\r\n      // Здесь используем emit для передачи обновленного значения родительскому компоненту\r\n      emit('update:modelValue', cityValue.value)\r\n    }\r\n\r\n    // Обработчик выбора города\r\n    const selectCity = (city) => {\r\n      cityValue.value = city.title\r\n      cities.value = [] // Скрываем список после выбора\r\n      emit('update:modelValue', city.title) // Отправляем выбранный город родителю\r\n    }\r\n\r\n    return { cityValue, cities, onInput, selectCity }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.cities-list {\r\n  list-style-type: none;\r\n  margin: 0;\r\n  padding: 0;\r\n  max-height: 200px;\r\n  overflow-y: auto;\r\n  border: 1px solid #ccc;\r\n  background-color: #fff;\r\n  position: absolute;\r\n  z-index: 10;\r\n}\r\n\r\n.city-item {\r\n  padding: 8px;\r\n  cursor: pointer;\r\n}\r\n\r\n.city-item:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n</style>\r\n"],"mappings":"AAuBA,SAASA,GAAG,EAAEC,WAAU,QAAS,KAAI;AAErC,eAAe;EACbC,KAAK,EAAE;IACLC,UAAU,EAAEC;EACd,CAAC;EACDC,KAAKA,CAACH,KAAK,EAAE;IACX,MAAMI,SAAQ,GAAIN,GAAG,CAACE,KAAK,CAACC,UAAU;IACtC,MAAMI,MAAK,GAAIP,GAAG,CAAC,EAAE;;IAErB;IACA,MAAMQ,IAAG,GAAIP,WAAW,CAAC;;IAEzB;IACA,MAAMQ,WAAU,GAAI,MAAAA,CAAA,KAAY;MAC9B,IAAIH,SAAS,CAACI,KAAK,CAACC,IAAI,CAAC,MAAM,EAAE,EAAE;QACjCJ,MAAM,CAACG,KAAI,GAAI,EAAC;QAChB;MACF;MAEA,IAAI;QACF,MAAME,QAAO,GAAI,MAAMC,KAAK,CAAC,kDAAkDP,SAAS,CAACI,KAAK,+FAA+F;QAC7L,MAAMI,IAAG,GAAI,MAAMF,QAAQ,CAACG,IAAI,CAAC;QAEjC,IAAID,IAAI,CAACF,QAAO,IAAKE,IAAI,CAACF,QAAQ,CAACI,KAAK,EAAE;UACxCT,MAAM,CAACG,KAAI,GAAII,IAAI,CAACF,QAAQ,CAACI,KAAI;QACnC;MACF,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK;MAC/C;IACF;;IAEA;IACA,MAAME,OAAM,GAAIA,CAAA,KAAM;MACpBV,WAAW,CAAC;MACZ;MACAD,IAAI,CAAC,mBAAmB,EAAEF,SAAS,CAACI,KAAK;IAC3C;;IAEA;IACA,MAAMU,UAAS,GAAKC,IAAI,IAAK;MAC3Bf,SAAS,CAACI,KAAI,GAAIW,IAAI,CAACC,KAAI;MAC3Bf,MAAM,CAACG,KAAI,GAAI,EAAC,EAAE;MAClBF,IAAI,CAAC,mBAAmB,EAAEa,IAAI,CAACC,KAAK,GAAE;IACxC;IAEA,OAAO;MAAEhB,SAAS;MAAEC,MAAM;MAAEY,OAAO;MAAEC;IAAW;EAClD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}