{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"education-input\"\n};\nconst _hoisted_2 = [\"value\"];\nconst _hoisted_3 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[9] || (_cache[9] = _createElementVNode(\"label\", {\n    for: \"education\"\n  }, \"Образование:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedEducation = $event),\n    id: \"education\"\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.educationVars, edu => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: edu.value,\n      value: edu.name\n    }, _toDisplayString(edu.name), 9 /* TEXT, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedEducation]]), $data.selectedEducation && $data.selectedEducation !== 'Среднее' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_cache[5] || (_cache[5] = _createElementVNode(\"label\", {\n    for: \"institution\"\n  }, \"Учебное заведение:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $props.value.institution = $event),\n    type: \"text\",\n    id: \"institution\",\n    placeholder: \"Введите учебное заведение\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $props.value.institution]]), _cache[6] || (_cache[6] = _createElementVNode(\"label\", {\n    for: \"faculty\"\n  }, \"Факультет:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $props.value.faculty = $event),\n    type: \"text\",\n    id: \"faculty\",\n    placeholder: \"Введите факультет\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $props.value.faculty]]), _cache[7] || (_cache[7] = _createElementVNode(\"label\", {\n    for: \"specialization\"\n  }, \"Специализация:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $props.value.specialization = $event),\n    type: \"text\",\n    id: \"specialization\",\n    placeholder: \"Введите специализацию\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $props.value.specialization]]), _cache[8] || (_cache[8] = _createElementVNode(\"label\", {\n    for: \"yearOfGraduation\"\n  }, \"Год окончания:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $props.value.yearOfGraduation = $event),\n    type: \"number\",\n    id: \"yearOfGraduation\",\n    placeholder: \"Год окончания\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $props.value.yearOfGraduation]])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","for","_cache","$event","$data","selectedEducation","id","_Fragment","_renderList","$props","educationVars","edu","value","name","_hoisted_2","_hoisted_3","institution","type","placeholder","faculty","specialization","yearOfGraduation","_createCommentVNode"],"sources":["D:\\Users\\danil\\untitled\\my-project\\src\\components\\EducationInput.vue"],"sourcesContent":["<template>\r\n  <div class=\"education-input\">\r\n    <label for=\"education\">Образование:</label>\r\n    <select v-model=\"selectedEducation\" id=\"education\">\r\n      <option v-for=\"edu in educationVars\" :key=\"edu.value\" :value=\"edu.name\">\r\n        {{ edu.name }}\r\n      </option>\r\n    </select>\r\n\r\n    <div v-if=\"selectedEducation && selectedEducation !== 'Среднее'\">\r\n      <label for=\"institution\">Учебное заведение:</label>\r\n      <input v-model=\"value.institution\" type=\"text\" id=\"institution\" placeholder=\"Введите учебное заведение\" />\r\n\r\n      <label for=\"faculty\">Факультет:</label>\r\n      <input v-model=\"value.faculty\" type=\"text\" id=\"faculty\" placeholder=\"Введите факультет\" />\r\n\r\n      <label for=\"specialization\">Специализация:</label>\r\n      <input v-model=\"value.specialization\" type=\"text\" id=\"specialization\" placeholder=\"Введите специализацию\" />\r\n\r\n      <label for=\"yearOfGraduation\">Год окончания:</label>\r\n      <input v-model=\"value.yearOfGraduation\" type=\"number\" id=\"yearOfGraduation\" placeholder=\"Год окончания\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    value: Object, // modelValue for two-way binding\r\n    educationVars: Array, // Array of available education options\r\n  },\r\n  data() {\r\n    return {\r\n      selectedEducation: this.value?.education || '', // To track selected education type\r\n    };\r\n  },\r\n  watch: {\r\n    selectedEducation(newVal) {\r\n      // Watch for changes in the selected education and update modelValue accordingly\r\n      this.$emit('update:value', { ...this.value, education: newVal });\r\n    },\r\n    // Watch other fields in value and propagate updates to the parent\r\n    'value.institution'(newVal) {\r\n      this.$emit('update:value', { ...this.value, institution: newVal });\r\n    },\r\n    'value.faculty'(newVal) {\r\n      this.$emit('update:value', { ...this.value, faculty: newVal });\r\n    },\r\n    'value.specialization'(newVal) {\r\n      this.$emit('update:value', { ...this.value, specialization: newVal });\r\n    },\r\n    'value.yearOfGraduation'(newVal) {\r\n      this.$emit('update:value', { ...this.value, yearOfGraduation: newVal });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<!--<template>-->\r\n<!--  <div ref=\"dropDown\">-->\r\n<!--    <label>Образование:</label>-->\r\n<!--&lt;!&ndash;    <input type=\"text\" v-model=\"educationValue\" @input=\"$emit('update:modelValue', educationValue)\" />&ndash;&gt;-->\r\n<!--    <div @click=\"isDropDownVisible=true\">-->\r\n<!--      {{mappedSelectedEducationVars}}-->\r\n<!--    </div>-->\r\n<!--    <div v-if=\"isDropDownVisible\">-->\r\n<!--      <p v-for=\"(educationVar, index) in educationVars\" :key=\"index\" @click=\"toggleSelectedEducationVars(educationVar)\">-->\r\n<!--        {{ educationVar.name || educationVar }}-->\r\n<!--      </p>-->\r\n<!--    </div>-->\r\n<!--&lt;!&ndash;    v-show=\"!SelectedEducationVars\"&ndash;&gt;-->\r\n<!--    <div v-show=\"SelectedEducationVars!==null && SelectedEducationVars.name!=='Среднее'\">-->\r\n<!--      <label>Учебное заведение:</label>-->\r\n<!--      <input type=\"text\" v-model=\"educationData.institution\" @input=\"updateModel\" />-->\r\n<!--      <label>Факультет:</label>-->\r\n<!--      <input type=\"text\" v-model=\"educationData.faculty\" @input=\"updateModel\" />-->\r\n<!--      <label>Специализация:</label>-->\r\n<!--      <input type=\"text\" v-model=\"educationData.specialization\" @input=\"updateModel\" />-->\r\n<!--      <label>Год окончания:</label>-->\r\n<!--      <input type=\"text\" v-model=\"educationData.yearOfGraduation\" @input=\"updateModel\" />-->\r\n<!--    </div>-->\r\n\r\n<!--  </div>-->\r\n<!--</template>-->\r\n\r\n<!--<script>-->\r\n<!--import { ref, computed, onMounted, onBeforeUnmount} from 'vue'-->\r\n\r\n<!--export default {-->\r\n<!--  props: {-->\r\n<!--    modelValue: Object,-->\r\n<!--    educationVars: {-->\r\n<!--      type: Array,-->\r\n<!--      default(){-->\r\n<!--        return []-->\r\n<!--      }-->\r\n<!--    }-->\r\n<!--  },-->\r\n<!--  setup(props, {emit}) {-->\r\n<!--    const SelectedEducationVars=ref(null)-->\r\n<!--    // const educationValue = ref(props.modelValue)-->\r\n<!--    // const educationalInstitutionValue = ref(props.modelValue)-->\r\n<!--    // const facultyValue = ref(props.modelValue)-->\r\n<!--    // const specializationValue = ref(props.modelValue)-->\r\n<!--    // const yearOfGraduationValue = ref(props.modelValue)-->\r\n<!--    const isDropDownVisible=ref(false)-->\r\n<!--    const dropDown=ref(null)-->\r\n<!--    const educationData = ref({-->\r\n<!--      education: '',-->\r\n<!--      institution: '',-->\r\n<!--      faculty: '',-->\r\n<!--      specialization: '',-->\r\n<!--      yearOfGraduation: '',-->\r\n<!--    });-->\r\n<!--    const updateModel = () => {-->\r\n<!--      if (!educationData.value.institution || !educationData.value.faculty || !educationData.value.specialization || !educationData.value.yearOfGraduation) {-->\r\n<!--        //errorMessage.value = 'Пожалуйста, заполните все поля!';-->\r\n<!--        return; // Не обновляем модель, если есть пустые поля-->\r\n<!--      }-->\r\n\r\n<!--      //errorMessage.value = ''; // Сбрасываем сообщение об ошибке, если все заполнено-->\r\n<!--      emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--    };-->\r\n<!--    const toggleSelectedEducationVars = (educationVar) => {-->\r\n<!--      SelectedEducationVars.value=educationVar;-->\r\n<!--      isDropDownVisible.value=false;-->\r\n<!--      educationData.value.education=educationVar-->\r\n<!--      if(SelectedEducationVars.value.name==='Среднее'){-->\r\n<!--        educationData.value.institution=1;-->\r\n<!--        educationData.value.faculty=1;-->\r\n<!--        educationData.value.specialization=1;-->\r\n<!--        educationData.value.yearOfGraduation=1;-->\r\n<!--      }-->\r\n<!--      if(SelectedEducationVars.value.name!=='Среднее'){-->\r\n<!--        educationData.value.institution=null;-->\r\n<!--        educationData.value.faculty=null;-->\r\n<!--        educationData.value.specialization=null;-->\r\n<!--        educationData.value.yearOfGraduation=null;-->\r\n<!--      }-->\r\n<!--      updateModel();-->\r\n\r\n<!--      // emit('update:modelValue', SelectedEducationVars);-->\r\n<!--    }-->\r\n<!--    const mappedSelectedEducationVars = computed(() => {-->\r\n<!--      return SelectedEducationVars.value?.name || SelectedEducationVars.value || 'Выбери';-->\r\n<!--    })-->\r\n<!--    // watch(() => props.modelValue, (newVal) => {-->\r\n<!--    //   // educationValue.value = newVal-->\r\n<!--    // })-->\r\n<!--    const closeDropDown=(element)=>{-->\r\n\r\n<!--      if(!dropDown.value.contains(element.target)){-->\r\n<!--        isDropDownVisible.value=false;-->\r\n<!--      }-->\r\n<!--    }-->\r\n<!--    onMounted(()=>{-->\r\n<!--      window.addEventListener('click', closeDropDown)-->\r\n<!--    })-->\r\n<!--    onBeforeUnmount(()=>{-->\r\n<!--      window.removeEventListener('click', closeDropDown)-->\r\n<!--    })-->\r\n<!--    return { closeDropDown,educationData, updateModel,  SelectedEducationVars, toggleSelectedEducationVars,  mappedSelectedEducationVars, isDropDownVisible, dropDown}-->\r\n<!--  }-->\r\n<!--}-->\r\n<!--</script>-->\r\n\r\n\r\n\r\n<!--const computedEducation = computed({-->\r\n<!--get: () => SelectedEducationVars.value?.name || SelectedEducationVars.value || 'Выбери',-->\r\n<!--set: (newValue) => {-->\r\n<!--SelectedEducationVars.value = newValue;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n\r\n<!--const institution = computed({-->\r\n<!--get: () => educationData.value.institution,-->\r\n<!--set: (value) => {-->\r\n<!--educationData.value.institution = value;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n\r\n<!--const faculty = computed({-->\r\n<!--get: () => educationData.value.faculty,-->\r\n<!--set: (value) => {-->\r\n<!--educationData.value.faculty = value;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n\r\n<!--const specialization = computed({-->\r\n<!--get: () => educationData.value.specialization,-->\r\n<!--set: (value) => {-->\r\n<!--educationData.value.specialization = value;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n\r\n<!--const yearOfGraduation = computed({-->\r\n<!--get: () => educationData.value.yearOfGraduation,-->\r\n<!--set: (value) => {-->\r\n<!--educationData.value.yearOfGraduation = value;-->\r\n<!--emit('update:modelValue', { selected: SelectedEducationVars.value, ...educationData.value });-->\r\n<!--}-->\r\n<!--});-->\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAiB;mBAD9B;;EAAAC,GAAA;AAAA;;uBACEC,mBAAA,CAqBM,OArBNC,UAqBM,G,0BApBJC,mBAAA,CAA2C;IAApCC,GAAG,EAAC;EAAW,GAAC,cAAY,sB,gBACnCD,mBAAA,CAIS;IAPb,uBAAAE,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAGqBC,KAAA,CAAAC,iBAAiB,GAAAF,MAAA;IAAEG,EAAE,EAAC;yBACrCR,mBAAA,CAESS,SAAA,QANfC,WAAA,CAI4BC,MAAA,CAAAC,aAAa,EAApBC,GAAG;yBAAlBb,mBAAA,CAES;MAF6BD,GAAG,EAAEc,GAAG,CAACC,KAAK;MAAGA,KAAK,EAAED,GAAG,CAACE;wBAC7DF,GAAG,CAACE,IAAI,wBALnBC,UAAA;2EAGqBV,KAAA,CAAAC,iBAAiB,E,GAMvBD,KAAA,CAAAC,iBAAiB,IAAID,KAAA,CAAAC,iBAAiB,kB,cAAjDP,mBAAA,CAYM,OArBViB,UAAA,G,0BAUMf,mBAAA,CAAmD;IAA5CC,GAAG,EAAC;EAAa,GAAC,oBAAkB,sB,gBAC3CD,mBAAA,CAA0G;IAXhH,uBAAAE,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAWsBM,MAAA,CAAAG,KAAK,CAACI,WAAW,GAAAb,MAAA;IAAEc,IAAI,EAAC,MAAM;IAACX,EAAE,EAAC,aAAa;IAACY,WAAW,EAAC;iDAA5DT,MAAA,CAAAG,KAAK,CAACI,WAAW,E,6BAEjChB,mBAAA,CAAuC;IAAhCC,GAAG,EAAC;EAAS,GAAC,YAAU,sB,gBAC/BD,mBAAA,CAA0F;IAdhG,uBAAAE,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAcsBM,MAAA,CAAAG,KAAK,CAACO,OAAO,GAAAhB,MAAA;IAAEc,IAAI,EAAC,MAAM;IAACX,EAAE,EAAC,SAAS;IAACY,WAAW,EAAC;iDAApDT,MAAA,CAAAG,KAAK,CAACO,OAAO,E,6BAE7BnB,mBAAA,CAAkD;IAA3CC,GAAG,EAAC;EAAgB,GAAC,gBAAc,sB,gBAC1CD,mBAAA,CAA4G;IAjBlH,uBAAAE,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAiBsBM,MAAA,CAAAG,KAAK,CAACQ,cAAc,GAAAjB,MAAA;IAAEc,IAAI,EAAC,MAAM;IAACX,EAAE,EAAC,gBAAgB;IAACY,WAAW,EAAC;iDAAlET,MAAA,CAAAG,KAAK,CAACQ,cAAc,E,6BAEpCpB,mBAAA,CAAoD;IAA7CC,GAAG,EAAC;EAAkB,GAAC,gBAAc,sB,gBAC5CD,mBAAA,CAA0G;IApBhH,uBAAAE,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAoBsBM,MAAA,CAAAG,KAAK,CAACS,gBAAgB,GAAAlB,MAAA;IAAEc,IAAI,EAAC,QAAQ;IAACX,EAAE,EAAC,kBAAkB;IAACY,WAAW,EAAC;iDAAxET,MAAA,CAAAG,KAAK,CAACS,gBAAgB,E,OApB5CC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}